{"version":3,"sources":["webpack:///./src/app/planner/create-plan/create-plan.component.html","webpack:///./src/app/planner/create-plan/create-plan.component.scss","webpack:///./src/app/planner/create-plan/create-plan.component.ts","webpack:///./src/app/planner/create-plan/create-plan.module.ts"],"names":[],"mappings":"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","file":"planner-create-plan-create-plan-module.js","sourcesContent":["module.exports = \"<app-loader *ngIf=\\\"isLoading\\\"></app-loader>\\n<div class=\\\"container-fluid\\\">\\n  <h6 class=\\\"manulal-plan-header\\\">\\n    <b>Create Plan > Upload Plan</b>\\n  </h6>\\n</div>\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <div class=\\\"create-plan\\\">\\n        <div class=\\\"uploadfile\\\">\\n          <img src=\\\"./assets/images/Upload.png\\\" alt=\\\"upload image\\\" class=\\\"img-fluid\\\" />\\n          <h5>\\n            <label for=\\\"plan-file\\\">\\n              <u>Click here</u> to Upload Files</label>\\n          </h5>\\n          <input type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" value=\\\"\\\" id=\\\"plan-file\\\" accept=\\\".xls,.xlsx\\\" (click)=\\\"itemsImportInput.value = null\\\"\\n            #itemsImportInput/>\\n          <a download href=\\\"./assets/excel/Plan_template.xlsx\\\">\\n            <p>Download Dispatch Plan Template</p>\\n          </a>\\n          <div class=\\\"error-log\\\" *ngIf=\\\"IsErrorLog\\\">\\n            <mat-card>\\n              <mat-list role=\\\"list\\\">\\n                <mat-list-item *ngFor=\\\"let data of ErrorData\\\">{{data}}</mat-list-item>\\n              </mat-list>\\n            </mat-card>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BsYW5uZXIvY3JlYXRlLXBsYW4vY3JlYXRlLXBsYW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { Router, ActivatedRoute, NavigationExtras } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { ApiserviceService } from '../../services/api/apiservice.service';\nimport { FileUploadErrorsDialogComponent } from '../../public/file-upload-errors-dialog/file-upload-errors-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-create-plan',\n  templateUrl: './create-plan.component.html',\n  styleUrls: ['./create-plan.component.scss']\n})\nexport class CreatePlanComponent implements OnInit {\n  ErrorData: any;\n  // errorData: any;\n  file: File;\n  arrayBuffer: any;\n  isLoading: boolean = false;\n  responseData = '';\n  planData = '';\n  data = [];\n  IsErrorLog: boolean = false;\n  planId: number;\n  constructor(\n    private router: Router,\n    private acitvatedRoute: ActivatedRoute,\n    private toastr: ToastrService,\n    private service: ApiserviceService,\n    public dialog: MatDialog,\n  ) { }\n\n  ngOnInit() {\n    localStorage.setItem(\"userMenu\", \"create-plan\");\n  }\n  onFileChange(event) {\n    this.IsErrorLog = false;\n    this.isLoading = true;\n    this.file = event.target.files[0];\n    let importedItemFileList = [];\n    if ((this.file['type'] == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') || (this.file['type'] == 'application/vnd.ms-excel')) {\n      let fileReader = new FileReader();\n      fileReader.onload = (e) => {\n        this.arrayBuffer = fileReader.result;\n        var data = new Uint8Array(this.arrayBuffer);\n        var arr = new Array();\n        for (var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);\n        var bstr = arr.join(\"\");\n        var workbook = XLSX.read(bstr, { type: 'binary', cellDates: true, cellNF: false, cellText: false });\n        var first_sheet_name = workbook.SheetNames[0];\n        var worksheet = workbook.Sheets[first_sheet_name];\n        importedItemFileList = XLSX.utils.sheet_to_json(worksheet, { dateNF: \"DD/MM/YYYY\", raw: false });\n        let plannerData = {\n          planItems: importedItemFileList\n        }\n        let ValidData = true;\n        importedItemFileList.forEach(item => {\n          item.Quantity = Number(item.Quantity);\n          item.Priority = (item.Priority) ? (Number(item.Priority)) : '';\n          // For Quantity validation \n          if (isNaN(item.Quantity) || (item.Quantity <= 0)) {\n            ValidData = false;\n          }\n          // For priority validation , priority not mandatory fileld that logic small diff from quantity validation\n          if ((item.Priority) || (item.Priority === 0)) {\n            if (isNaN(item.Priority) || (item.Priority <= 0)) {\n              ValidData = false;\n            }\n          }\n        })\n        console.log(\"importedItemFileList\", importedItemFileList);\n        if (ValidData) {\n          this.service.post_service(ApiserviceService.apisList.plannerService, plannerData).subscribe(response => {\n            if (response['statusCode'] == 200) {\n              this.responseData = response['data'];\n              this.planId = this.responseData['planId'];\n              this.router.navigateByUrl('/plan/pending-plans/view-plan/' + this.planId);\n              console.log(\"resposne\", this.responseData);\n            } else {\n              this.isLoading = false;\n              this.ErrorData = response['data'];\n              this.IsErrorLog = true\n            }\n          },\n            (err) => {\n              console.log(\"Error\", err);\n              this.toastr.error(\"Something went wrong..\", \"Error!\");\n              this.isLoading = false;\n            })\n        } else {\n          this.isLoading = false;\n          this.toastr.error(\"Plese enter only Number / Non Zeros / Non Negative values for Quantity and Priority\");\n        }\n\n        console.log(\"planndata\", JSON.stringify(plannerData));\n      }\n      fileReader.readAsArrayBuffer(this.file);\n    } else {\n      this.isLoading = false;\n      this.toastr.error(\"upload only Xlsx files ..\", \"Error!\");\n    }\n\n  }\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CreatePlanComponent } from './create-plan.component';\nimport { customMaterialModule } from '../../angular-material';\nimport { LoaderModule } from '../../public/loader/loader-shared.module';\nimport { FileUploadErrorsDialogComponent } from '../../public/file-upload-errors-dialog/file-upload-errors-dialog.component';\nimport { FormsModule } from '@angular/forms';\nimport { PlannerAuthGuardService } from '../../services/auth-guard/planner-auth-guard.service';\n\nconst routes: Routes = [\n  { path: '', component: CreatePlanComponent},\n];\n\n@NgModule({\n  imports: [\n    [RouterModule.forChild(routes)],\n    CommonModule,\n    LoaderModule,\n    customMaterialModule,\n    FormsModule\n  ],\n  declarations: [\n    CreatePlanComponent,\n   // FileUploadErrorsDialogComponent\n  ],\n  entryComponents:[\n   // FileUploadErrorsDialogComponent,\n    CreatePlanComponent\n  ],\n  providers:\n    [\n      PlannerAuthGuardService\n    ],\n})\nexport class CreatePlanModule { }\n"],"sourceRoot":""}