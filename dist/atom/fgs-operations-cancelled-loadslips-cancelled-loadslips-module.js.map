{"version":3,"sources":["webpack:///./src/app/custom-date-pipe.ts","webpack:///./src/app/date-pipe-shared.module.ts","webpack:///./src/app/fgs-operations/cancelled-loadslips/cancelled-loadslips.component.html","webpack:///./src/app/fgs-operations/cancelled-loadslips/cancelled-loadslips.component.scss","webpack:///./src/app/fgs-operations/cancelled-loadslips/cancelled-loadslips.component.ts","webpack:///./src/app/fgs-operations/cancelled-loadslips/cancelled-loadslips.module.ts"],"names":[],"mappings":"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","file":"fgs-operations-cancelled-loadslips-cancelled-loadslips-module.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Formats a /Date(XXXXXXXXXXXXXXXX)/ string into a JSON Date object\n * Takes an argument as input of actual date value in /Date(XXXXXXXXXXXXXXXX)/ format.\n * Usage:\n * date-value | customDateFormat\n * Example:\n * {{ '/Date(1402034400000)/' | customDateFormat}}\n * formats to: \"2014-06-06T06:00:00.000Z\" \n*/\n@Pipe({ name: \"customDateFormat\", pure: true })\nexport class CustomDateFormat implements PipeTransform {\n  transform(\n    value: any,\n    valuesplitindexvalues: string,\n    finalDate: string\n  ): number {\n    if (value) {\n      valuesplitindexvalues = value.split(\"/\");\n      finalDate =\n        valuesplitindexvalues[1] +\n        \"/\" +\n        valuesplitindexvalues[0] +\n        \"/\" +\n        valuesplitindexvalues[2];\n      console.log(valuesplitindexvalues);\n      console.log(finalDate);\n    }\n\n    if (finalDate) {\n      var myDate = new Date(finalDate).getTime();\n      return myDate;\n    }\n    console.log(finalDate);\n    \n  }\n}","import { NgModule} from '@angular/core';\nimport { CustomDateFormat } from './custom-date-pipe';\n\n\n@NgModule({\n  imports: [\n   \n  ],\n  declarations: [\n    CustomDateFormat\n  ],\n  exports:[\n    CustomDateFormat\n  ]\n})\n\nexport class CustomDatePipeModule { }\n","module.exports = \"<app-loader *ngIf=\\\"isLoading\\\"></app-loader>\\n<div class=\\\"container-fluid\\\">\\n  <h6 class=\\\"manulal-plan-header\\\">\\n    <b> Loadslip > Cancelled Loadslips</b>\\n\\n    <span class=\\\"pull-right refresh-span\\\">\\n      <button class=\\\"theme-small-button\\\" (click)=\\\"export()\\\" matTooltip=\\\"Export to excel\\\">\\n        <i class=\\\"fa fa-file-excel-o\\\" aria-hidden=\\\"true\\\"></i>\\n      </button>\\n      <button class=\\\"theme-small-button\\\" (click)=\\\"refreshData()\\\" matTooltip=\\\"Refresh\\\">\\n        <i class=\\\"fa fa-repeat fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\n      </button>\\n      <button class=\\\"theme-small-button\\\" (click)=\\\"showFilter()\\\" matTooltip=\\\"filter\\\">\\n        <i class=\\\"fa fa-filter fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\n      </button>\\n    </span>\\n  </h6>\\n  <div class=\\\"manualplan-fields\\\">\\n    <div class=\\\"col-md-12 row\\\" *ngIf=\\\"isShow\\\">\\n      <div class=\\\"col-md-12 padding-right-40\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput disabled [matDatepicker]=\\\"formPicker\\\" placeholder=\\\"From Date\\\" [(ngModel)]=\\\"fromDate\\\"\\n                  name=\\\"fromDate\\\" (dateChange)=\\\"addEvent('fromDate', $event)\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"formPicker\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #formPicker disabled=\\\"false\\\"></mat-datepicker>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput disabled [matDatepicker]=\\\"toPicker\\\" [min]=\\\"fromDate\\\" placeholder=\\\"To Date\\\"\\n                  [(ngModel)]=\\\"toDate\\\" name=\\\"toDate\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"toPicker\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #toPicker [disabled]=\\\"!fromDate\\\"></mat-datepicker>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\" *ngIf=\\\"service.isDPREPRole()\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n              <input matInput placeholder=\\\"Source\\\" (keyup)=\\\"getfilterSource($event)\\\" autocomplete=\\\"off\\\"\\n                [matAutocomplete]=\\\"sourceAutocomplete\\\" [(ngModel)]=\\\"sourceCode\\\" name=\\\"source\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n              <mat-autocomplete #sourceAutocomplete=\\\"matAutocomplete\\\">\\n                <mat-option *ngFor=\\\"let list of sourceList\\\" [value]=\\\"list.value\\\">\\n                  <span matTooltip={{list.value}}>{{list.value}} - ({{list.description}})</span>\\n                </mat-option>\\n              </mat-autocomplete>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput placeholder=\\\"Destination\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"statesAutocomplete\\\"\\n                  [(ngModel)]=\\\"destination\\\" name=\\\"destination\\\" autocomplete=\\\"off\\\" (keyup)=\\\"getDestinationList($event)\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                <mat-autocomplete #statesAutocomplete=\\\"matAutocomplete\\\">\\n                  <mat-option *ngFor=\\\"let list of destinationList\\\" [value]=\\\"list.value\\\"\\n                    (click)=\\\"setDestDescription(list.description)\\\"\\n                    (onSelectionChange)=\\\"setDestDescription(list.description)\\\">\\n                    <span>{{list.value}}</span>\\n                  </mat-option>\\n                </mat-autocomplete>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"pl-0\\\" [ngClass]=\\\"(service.isDPREPRole())?'col-md-1':'col-md-2'\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput placeholder=\\\"Destination Description\\\" aria-label=\\\"State\\\"\\n                  [matAutocomplete]=\\\"destDisAutocomplete\\\" [(ngModel)]=\\\"destinationDesc\\\" name=\\\"destination\\\"\\n                  (keyup)=\\\"getUserDestinationList($event)\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                <mat-autocomplete #destDisAutocomplete=\\\"matAutocomplete\\\">\\n                  <mat-option *ngFor=\\\"let list of descriptionList\\\" [value]=\\\"list.description\\\"\\n                    (click)=\\\"setDestination(list.value)\\\" (onSelectionChange)=\\\"setDestination(list.value)\\\">\\n                    <span>({{list.description}})</span>\\n                  </mat-option>\\n                </mat-autocomplete>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"pl-0 col-md-2\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Truck\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"truckNumber\\\" name=\\\"truckNumber\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <mat-select placeholder=\\\"Truck/Container Type\\\" [(ngModel)]=\\\"truckType\\\" name=\\\"truckType\\\" multiple>\\n                  <!-- <mat-option [value]=\\\"\\\">None</mat-option> -->\\n                  <mat-option *ngFor=\\\"let truck of truckList\\\" [value]=\\\"truck.value\\\"> {{truck.value}} </mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Container\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"container\\\" name=\\\"container\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput aria-label=\\\"Transporter\\\" placeholder=\\\"Transporter\\\"\\n                  (keyup)=\\\"getfilterTransporter($event)\\\" autocomplete=\\\"off\\\" [matAutocomplete]=\\\"transporterAutocomplete\\\"\\n                  [(ngModel)]=\\\"transporter\\\" name=\\\"transporter\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                <mat-autocomplete #transporterAutocomplete=\\\"matAutocomplete\\\">\\n                  <mat-option *ngFor=\\\"let list of transporterList\\\" [value]=\\\"list.value\\\">\\n                    <span>{{list.value}}</span>\\n                  </mat-option>\\n                </mat-autocomplete>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput placeholder=\\\"Material Code\\\" autocomplete=\\\"off\\\" aria-label=\\\"Material Code\\\"\\n                  [matAutocomplete]=\\\"materialCodeAutocomplete\\\" [(ngModel)]=\\\"materialCode\\\" name=\\\"materialCode\\\"\\n                  (keyup)=\\\"filterMaterialCode($event)\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                <mat-autocomplete #materialCodeAutocomplete=\\\"matAutocomplete\\\">\\n                  <mat-option *ngFor=\\\"let list of materilcodelist\\\" [value]=\\\"list.value\\\">\\n                    <span>{{list.value}}</span>\\n                  </mat-option>\\n                </mat-autocomplete>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Type\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"type\\\" name=\\\"type\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n\\n\\n\\n\\n          <!-- <div class=\\\"col-md-2 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                    <input matInput placeholder=\\\"Destination\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"statesAutocomplete\\\"\\n                      [(ngModel)]=\\\"destination\\\" name=\\\"destination\\\" autocomplete=\\\"off\\\"\\n                      (keyup)=\\\"getDestinationList($event)\\\">\\n                    <mat-autocomplete #statesAutocomplete=\\\"matAutocomplete\\\">\\n                      <mat-option *ngFor=\\\"let list of destinationList\\\" [value]=\\\"list.value\\\">\\n                        <span matTooltip={{list.description}}>{{list.value}} - ({{list.description}})</span>\\n                      </mat-option>\\n                    </mat-autocomplete>\\n                  </mat-form-field>\\n                </div>\\n              </div> -->\\n\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <mat-select placeholder=\\\"MKT Segment\\\" [(ngModel)]=\\\"mktsegment\\\" name=\\\"mktsegment\\\" multiple>\\n                  <!-- <mat-option [value]=\\\"\\\">None</mat-option> -->\\n                  <mat-option *ngFor=\\\"let mktsegment of mktsegmentList\\\" [value]=\\\"mktsegment\\\">\\n                    {{mktsegment}}\\n                  </mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-2 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Load Slip Id\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"loadSlipId\\\"\\n                  name=\\\"loadslipID\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-2 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Shipment Id\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"shipmentId\\\" name=\\\"shipmentId\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-1 pl-0\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Invoice\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"invoice\\\" name=\\\"Invoice\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-2 pl-0\\\">\\n            <mat-form-field>\\n              <input matInput aria-label=\\\"Country of Destination\\\" placeholder=\\\"Country of Destination\\\"\\n                (keyup)=\\\"countryOfDestinationFilter($event,'destCountrySearch')\\\" autocomplete=\\\"off\\\"\\n                [matAutocomplete]=\\\"dischargeAutocomplete\\\" [(ngModel)]=\\\"destCountryName\\\" name=\\\"destCountryName\\\">\\n              <mat-autocomplete #dischargeAutocomplete=\\\"matAutocomplete\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                <mat-option *ngFor=\\\"let country of countryList\\\" [value]=\\\"country.description\\\">\\n                  <span matTooltip={{country.description}}>{{country.value}} - ({{country.description}})</span>\\n                </mat-option>\\n              </mat-autocomplete>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"pull-right\\\">\\n        <div class=\\\"search-fileds\\\">\\n          <button class=\\\"theme-small-button\\\" (click)=\\\"filterCancelLoadSlip()\\\" matTooltip=\\\"Search\\\">\\n            <i class=\\\"fa fa-search fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\n          </button>\\n          <button class=\\\"theme-delete-button\\\" (click)=\\\"clearAll()\\\" matTooltip=\\\"Clear\\\">\\n            <i class=\\\"fa fa-times\\\" aria-hidden=\\\"true\\\"></i>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"clearfix\\\"></div>\\n\\n  <ngx-datatable #table class='material ngx-table-custom-scroll  ngx-table-tr-custom-scroll' #table\\n    [rows]='draftedLoadslipsList' [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [footerHeight]=\\\"30\\\" [rowHeight]=\\\"'auto'\\\"\\n    [externalPaging]=\\\"true\\\" [scrollbarH]=\\\"true\\\" [limit]=\\\"page.limit\\\" (page)=\\\"datatablePageData($event)\\\"\\n    [count]=\\\"page.count\\\" [offset]=\\\"page.offset\\\">\\n    <ngx-datatable-column name=\\\"Load Slip Id\\\" [frozenLeft]=\\\"true\\\" [width]=\\\"170\\\" [resizeable]=\\\"false\\\" prop=\\\"loadslipId\\\"\\n      [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        <a (click)=\\\"viewDraftLoadSlipData(row)\\\">{{row.loadslipId}}</a>\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Shipment ID\\\" [frozenLeft]=\\\"freezeLeftValue\\\" [width]=\\\"130\\\" [resizeable]=\\\"false\\\" prop=\\\"shipmentId\\\"\\n      [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.shipmentId}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Source\\\" [frozenLeft]=\\\"true\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"sourceLoc\\\"\\n      [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.sourceLoc}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Dest\\\" [frozenLeft]=\\\"true\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"destLoc\\\"\\n      [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.destLoc}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Truck\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" prop=\\\"truckNumber\\\" [sortable]=\\\"true\\\"\\n      [frozenLeft]=\\\"freezeLeftValue\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.truckNumber}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Dest Description\\\" [width]=\\\"130\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"destDis\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.destDis}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Type\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"stopType\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.stopType || '--'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Order Type\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" prop=\\\"type\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.type || '--'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Created Date\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"createdDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.createdDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n\\n\\n    <ngx-datatable-column name=\\\"Truck/Cont Type\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" prop=\\\"truckType\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.truckType}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Transporter\\\" [width]=\\\"130\\\" [resizeable]=\\\"false\\\" prop=\\\"servprov\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.servprov || '--'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"STO/SO\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" prop=\\\"stoSoNum\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.stoSoNum}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Delivery\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" prop=\\\"delivery\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.delivery}}\\n      </ng-template>\\n    </ngx-datatable-column>]\\n    <ngx-datatable-column name=\\\"Invoice\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" prop=\\\"sapInvoice\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.sapInvoice}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Invoice Dt.\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" prop=\\\"sapInvoiceDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.sapInvoiceDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <!-- <ngx-datatable-column name=\\\"Confirm Dt.\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"gatedOutDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.gatedOutDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column> -->\\n    <ngx-datatable-column name=\\\"Actual Arrival Dt.\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"actualArrivalDate\\\"\\n      [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.actualArrivalDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"LR\\\" [width]=\\\"130\\\" [resizeable]=\\\"false\\\" prop=\\\"lrNum\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.lrNum}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"LR Date\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"lrDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.lrDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Container\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"containerNum\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.containerNum}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Country of Destination\\\" [width]=\\\"200\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n      prop=\\\"destCountryName\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.destCountryName}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"DIT_QTY\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" prop=\\\"ditQty\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.ditQty}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"SHORTAGE_QTY\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" prop=\\\"shortQty\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.shortQty}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n\\n    <ngx-datatable-column name=\\\"Total Loaded\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"qty\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.qty}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Tyre\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"totTyres\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.totTyres}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Tube\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"totTubes\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.totTubes}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Flap\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"totFlaps\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.totFlaps}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Valve\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"totValve\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.totValve}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"PCTR\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"totPctr\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{(row.totPctr)?(row.totPctr):0}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Other Qty\\\" [width]=\\\"50\\\" [resizeable]=\\\"false\\\" prop=\\\"otherQty\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.otherQty | number : '1.2-2'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Total Qty\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"transhipment\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.totQty}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"GRN\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"grn\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.grn}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Tranship\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"transhipment\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.transhipment}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Freight Avail\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"transhipment\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.freightAvailability}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"TTE Qty\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"tteQty\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.tteQty | number : '1.2-2'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Cat\\\" [width]=\\\"90\\\" [resizeable]=\\\"false\\\" prop=\\\"itemCategory\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.itemCategory}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n\\n    <ngx-datatable-column name=\\\"TTE Util\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"tteUtil\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.tteUtil | number : '1.2-2'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Wt Util\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"weightUtil\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.weightUtil | number : '1.2-2'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Volume Util\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" prop=\\\"weightUtil\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.volumeUtil | number : '1.2-2'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"DSeq\\\" [width]=\\\"50\\\" [resizeable]=\\\"false\\\" prop=\\\"dropSeq\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.dropSeq}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Arrived Bay\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"bayArrivedDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.bayArrivedDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Print LS\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"lsPrintDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.lsPrintDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Send For Barcode\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"sendForBarcodeDate\\\"\\n      [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.sendForBarcodeDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Loading Start\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"loadingStartDate\\\"\\n      [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.loadingStartDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Loading End\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"loadingEndDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.loadingEndDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Confirm\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"confirmedDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.confirmedDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Release\\\" [width]=\\\"125\\\" [resizeable]=\\\"false\\\" prop=\\\"releaseDate\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.releaseDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Insert User\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"insertUser\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.insertUser}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Update User\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"updateUser\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.updateUser}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Loadslip Comments\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" prop=\\\"comments\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        <div class=\\\"edit-field\\\" [title]=\\\"row.comments\\\" [ngClass]=\\\"{'cursor-pointer':row.comments?.length>10}\\\"\\n          (click)=\\\"showComments(row.comments)\\\">\\n          {{(row.comments?.length>10)? (row.comments | slice:0:10)+'..':(row.comments)}}\\n        </div>\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Status\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" prop=\\\"status\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.status}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"MKT Seg\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" prop=\\\"marketSegment\\\" [sortable]=\\\"true\\\">\\n      <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n        {{row.marketSegment}}\\n      </ng-template>\\n    </ngx-datatable-column>\\n    <ngx-datatable-column name=\\\"Cust Inv Num\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" prop=\\\"custInvNum\\\" [sortable]=\\\"true\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.customInvoiceNumber}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n     <!-- Footer Template starts -->\\n     <ngx-datatable-footer>\\n      <ng-template ngx-datatable-footer-template let-rowCount=\\\"rowCount\\\" let-pageSize=\\\"pageSize\\\"\\n        let-selectedCount=\\\"selectedCount\\\" let-curPage=\\\"curPage\\\" let-offset=\\\"offset\\\" let-isVisible=\\\"isVisible\\\">\\n        <div class=\\\"page-count\\\">\\n          <span *ngIf=\\\"selectedCount\\\">\\n            {{selectedCount.toLocaleString()}} Selected |\\n          </span>\\n          Showing {{(offset * pageSize)+1}} to {{(rowCount>\\n          (curPage*pageSize))?(curPage*pageSize):(rowCount)}} of\\n          {{(rowCount)}} records.\\n        </div>\\n        <datatable-pager [pagerLeftArrowIcon]=\\\"'datatable-icon-left'\\\" [pagerRightArrowIcon]=\\\"'datatable-icon-right'\\\"\\n          [pagerPreviousIcon]=\\\"'datatable-icon-prev'\\\" [pagerNextIcon]=\\\"'datatable-icon-skip'\\\" [page]=\\\"curPage\\\"\\n          [size]=\\\"pageSize\\\" [count]=\\\"rowCount\\\" [hidden]=\\\"!((rowCount / pageSize) > 1)\\\"\\n          (change)=\\\"table.onFooterPage($event)\\\">\\n        </datatable-pager>\\n      </ng-template>\\n    </ngx-datatable-footer>\\n    <!-- Footer Template Ends -->\\n  </ngx-datatable>\\n</div>\\n\\n\\n<!-- Modal -->\\n<div class=\\\"modal fade\\\" id=\\\"integrationMsgModal\\\" role=\\\"dialog\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <!-- Modal content-->\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n        <h4 class=\\\"modal-title\\\">Loadslip Comment !!!</h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <p>{{integrationMsg}}</p>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <!-- <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"saveComments()\\\">Save</button> -->\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\">Close</button>\\n      </div>\\n    </div>\\n\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Zncy1vcGVyYXRpb25zL2NhbmNlbGxlZC1sb2Fkc2xpcHMvY2FuY2VsbGVkLWxvYWRzbGlwcy5jb21wb25lbnQuc2NzcyJ9 */\"","import { HelperServiceService } from './../../services/helper-service/helper-service.service';\nimport { Component, OnInit, ViewChild, DoCheck } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport * as XLSX from 'xlsx';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';\nimport { ApiserviceService } from 'src/app/services/api/apiservice.service';\nimport { APP_DATE_FORMATS, AppDateAdapter } from 'src/app/public/date.adapters';\nimport { loadslipStatus, constants } from 'src/app/constants';\nimport * as moment from 'moment';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\ndeclare var $: any\n@Component({\n  selector: 'app-cancelled-loadslips',\n  templateUrl: './cancelled-loadslips.component.html',\n  styleUrls: ['./cancelled-loadslips.component.scss'],\n  providers: [\n    { provide: DateAdapter, useClass: AppDateAdapter },\n    { provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS }\n  ]\n})\nexport class CancelledLoadslipsComponent implements OnInit,DoCheck {\n  isLoading: boolean = false;\n  draftedLoadslipsList = [];\n  page = {\n    limit: 10,\n    count: 0,\n    offset: 0,\n    orderBy: 'myColumn1',\n    orderDir: 'desc',\n    pageSize: 10\n  };\n  isShow: boolean = true;\n  destinationList: any[];\n  materilcodelist: any[];\n  destination: string;\n  destinationDesc: string;\n  descriptionList: any[];\n  truckType = [];\n  materialCode: any;\n  type: any;\n  loadSlipId: string;\n  transhipment: any;\n  invoice: any;\n  mktsegment = [];\n  shipmentId: string;\n  statusList = [\"CANCELLED\"];\n  mktsegmentList = [];\n  truckList = [];\n  currentDate = this.helperService.getTodayDate();\n  currentDateAsString = this.helperService.getTodayDateASString();\n  fromCreatedDate: string = '';\n  toCreatedDate: string = '';\n  toDate: string = '';\n  fromDate: string = '';\n  integrationMsg: string\n  container: any;\n  truckNumber: any;\n  check_Role_DP_REP: string;\n  sourceCode: string;\n  sourceList: any[];\n  roles: any;\n  countryList: any[];\n  destCountryName: string;\n  transporterList: any[];\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n  transporter: any;\n  freezeLeftValue: boolean = true;\n  constructor(\n    private service: ApiserviceService,\n    private toastr: ToastrService,\n    private helperService: HelperServiceService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) { }\n  ngDoCheck(){\n    let width = $(window).width();\n    if(width < 1024) {\n      this.freezeLeftValue = false;\n    }\n    else {\n      this.freezeLeftValue = true;\n    }\n  }\n  ngOnInit() {\n    localStorage.setItem(\"userMenu\", \"load-slip\");\n    this.loadSlipId = this.activatedRoute.snapshot.params['loadslipId']\n    this.check_Role_DP_REP = this.service.checkRole();\n    this.roles = constants.roles;\n    //get the loadslip based on search \n    if (this.loadSlipId) {\n      this.loadSlipId = this.loadSlipId\n    }\n    this.fromDate = this.currentDateAsString;\n    this.toDate = this.fromDate;\n    let bodyData = {\n      'fromCreatedDate': this.currentDate,\n      'toCreatedDate': this.currentDate,\n      'loadslipId': this.loadSlipId,\n      'type': loadslipStatus.cancelled,\n      'status': this.statusList\n    }\n    this.getCancelLoadSlipData(bodyData);\n\n    // for getting truck type master\n    this.getTruckTypeMasterData();\n\n    this.getMarketSegment();\n  }\n\n  // for getting truck type master\n  getTruckTypeMasterData() {\n    this.service.get_service(ApiserviceService.apisList.truckTypeMasterData).subscribe(response => {\n      if (response['statusCode'] == 200) {\n        this.truckList = response['data'];\n      } else {\n        this.toastr.error(response['message'] ? response['message'] : \"Some thing went wrong\", \"!Error\");\n      }\n    }, (err) => {\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n    });\n  }\n  onFooterPage(pageInfo) {\n    console.log(pageInfo);\n\n  }\n\n\n  //show the filter\n  showFilter() {\n    this.isShow = !this.isShow\n  }\n  // get destaination list on search\n  getDestinationList(event) {\n    this.destinationDesc = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.destinationList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?destination=' + filtervalue).subscribe(response => {\n        this.destinationList = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  //filter material code \n  filterMaterialCode(event) {\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.materilcodelist = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?materialCode=' + filtervalue).subscribe(response => {\n        this.materilcodelist = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  // Refresh data\n  refreshData() {\n    this.clearAll();\n    this.table.offset = 0;\n    this.currentDateAsString = this.helperService.getTodayDateASString();\n    this.fromDate = this.currentDateAsString;\n    this.toDate = this.fromDate;\n    let bodyData = {\n      'fromCreatedDate': this.currentDate,\n      'toCreatedDate': this.currentDate,\n      'type': loadslipStatus.cancelled,\n      'status': this.statusList\n    }\n    this.getCancelLoadSlipData(bodyData);\n  }\n\n  //clear data \n  clearAll() {\n    this.destination = '';\n    this.destinationDesc = '';\n    this.descriptionList = [];\n    this.invoice = \"\";\n    this.materialCode = \"\";\n    this.loadSlipId = \"\";\n    this.type = \"\";\n    this.transhipment = \"\";\n    this.truckType = [];\n    this.mktsegment = [];\n    this.destinationList = [];\n    this.materilcodelist = [];\n    this.shipmentId = '';\n    this.toDate = '';\n    this.fromDate = '';\n    this.truckNumber = \"\";\n    this.container = \"\";\n    this.sourceCode = '';\n    this.destCountryName = '';\n    this.countryList = [];\n    this.transporter = '';\n  }\n  // drafted load slips filter creatria\n  getCancelLoadSlipData(bodyData) {\n    this.isLoading = true;\n    this.service.post_service(ApiserviceService.apisList.getDraftedLoadslips, bodyData).subscribe(response => {\n      if (response['statusCode'] == 200) {\n        let responseData = response['data'].loadslips;\n        this.draftedLoadslipsList = responseData;\n        this.draftedLoadslipsList = [...this.draftedLoadslipsList]\n        this.page.count = response['data'].total;\n        this.page.limit = response['data'].pageLength;\n        this.isLoading = false;\n      } else {\n        this.isLoading = false;\n        this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n      }\n    }, (err) => {\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n  }\n\n  // Date Validation\n  forDateValidation() {\n    if (this.fromDate != '' && this.fromDate != null) {\n      this.fromCreatedDate = moment(new Date(this.fromDate)).format(\"DD/MM/YYYY\");\n    } else {\n      this.fromCreatedDate = '';\n    }\n    if (this.toDate != '' && this.toDate != null) {\n      this.toCreatedDate = moment(new Date(this.toDate)).format(\"DD/MM/YYYY\");\n    } else {\n      this.toCreatedDate = '';\n    }\n  }\n  filterCancelLoadSlip() {\n    this.table.offset = 0;\n    this.forDateValidation();\n    let obj = this.countryList ? (this.countryList.find(a => a.description == this.destCountryName)) : {};\n    let bodyData = {\n      'fromCreatedDate': this.fromCreatedDate,\n      'toCreatedDate': this.toCreatedDate,\n      'marketSegment': this.mktsegment,\n      'destination': this.destination,\n      'invoice': this.invoice,\n      'itemId': this.materialCode,\n      'loadslipId': this.loadSlipId,\n      'stopType': this.type,\n      'transhipment': this.transhipment,\n      'shipmentId': this.shipmentId,\n      'truckType': this.truckType,\n      'type': loadslipStatus.cancelled,\n      // 'pageLength': this.page.count,\n      'status': this.statusList,\n      \"truckNumber\": this.truckNumber,\n      \"containerNum\": this.container,\n      \"source\": this.sourceCode,\n      \"destCountry\": obj ? (obj.value) : '',\n      \"transporter\": this.transporter\n    }\n    if (this.fromDate != '' && this.fromDate != null) {\n      if (this.toDate != '' && this.toDate != null) {\n        this.getCancelLoadSlipData(bodyData);\n      } else {\n        this.toastr.error(\"Please select To Date\", \"!Error\")\n      }\n    } else {\n      this.getCancelLoadSlipData(bodyData);\n    }\n\n  }\n\n  // export to excel file\n  export() {\n    if (this.draftedLoadslipsList.length > 0) {\n      this.isLoading = true;\n      this.forDateValidation();\n      let obj = this.countryList ? (this.countryList.find(a => a.description == this.destCountryName)) : {};\n      let data = {\n        'fromCreatedDate': this.fromCreatedDate,\n        'toCreatedDate': this.toCreatedDate,\n        'marketSegment': this.mktsegment,\n        'destination': this.destination,\n        'invoice': this.invoice,\n        'itemId': this.materialCode,\n        'loadslipId': this.loadSlipId,\n        'stopType': this.type,\n        'transhipment': this.transhipment,\n        'shipmentId': this.shipmentId,\n        'truckType': this.truckType,\n        'type': loadslipStatus.cancelled,\n        'pageLength': this.page.count,\n        'status': this.statusList,\n        \"truckNumber\": this.truckNumber,\n        \"containerNum\": this.container,\n        \"source\": this.sourceCode,\n        \"destCountry\": obj ? (obj.value) : '',\n        \"transporter\": this.transporter\n      }\n      this.service.post_service(ApiserviceService.apisList.getDraftedLoadslips, data).subscribe(response => {\n        if (response['statusCode'] == 200) {\n          let newPrintLoadslipData = response['data'].loadslips;\n          let excelRawData = newPrintLoadslipData;\n          let newExcelData = [];\n          for (let i = 0; i < excelRawData.length; i++) {\n            let data = {\n              \"Load Slip ID\": excelRawData[i].loadslipId,\n              \"Shipment Id\": excelRawData[i].shipmentId,\n              \"Source\": excelRawData[i].sourceLoc,\n              \"Destination\": excelRawData[i].destLoc,\n              \"Truck Number\": excelRawData[i].truckNumber,\n              \"Dest Description\": excelRawData[i].destDis,\n              \"Type\": excelRawData[i].stopType,\n              \"Order Type\": excelRawData[i].type,\n              \"Created Date\": this.service.customDateTimeFormat(excelRawData[i].createdDate),\n\n              \"Truck Type\": excelRawData[i].truckType,\n              \"Transporter\": excelRawData[i].servprov,\n              \"STO/SO\": excelRawData[i].stoSoNum,\n              \"Delivery\": excelRawData[i].delivery,\n              \"Invoice\": excelRawData[i].sapInvoice,\n              \"Invoice Date\": excelRawData[i].sapInvoiceDate,\n              \"Actual Arrival Date\": excelRawData[i].actualArrivalDate,\n              \"LR\": excelRawData[i].lrNum,\n              \"LR Date\": this.service.customDateTimeFormat(excelRawData[i].lrDate),\n              \"Container\": excelRawData[i].containerNum,\n              \"Country of Destination\": excelRawData[i].destCountryName,\n              \"DIT Quantity\": excelRawData[i].ditQty,\n              \"Shortage Quantity\": excelRawData[i].shortQty,\n              \"Total Loaded\": excelRawData[i].qty,\n              \"Tyre\": +excelRawData[i].totTyres,\n              \"Tube\": +excelRawData[i].totTubes,\n              \"Flap\": +excelRawData[i].totFlaps,\n              \"Valve\": +excelRawData[i].totValve,\n              \"PCTR\": (excelRawData[i].totPctr) ? (+excelRawData[i].totPctr) : 0,\n              \"Other Qty\": (excelRawData[i].otherQty) ? (+excelRawData[i].otherQty) : 0,\n              \"Total Qty\": +excelRawData[i].totQty,\n              \"GRN\": excelRawData[i].grn,\n              \"Transhipment\": excelRawData[i].transhipment,\n              \"Freight Available\": excelRawData[i].freightAvailability,\n              \"TTE Quantity\": excelRawData[i].tteQty ? +excelRawData[i].tteQty.toFixed(2) : 0,\n              \"Item Cate\": excelRawData[i].itemCategory,\n              \"TTE Util\": excelRawData[i].tteUtil ? +excelRawData[i].tteUtil.toFixed(2) : 0,\n              \"Weight Util\": excelRawData[i].weightUtil ? +excelRawData[i].weightUtil.toFixed(2) : 0,\n              \"Volume Util\": excelRawData[i].volumeUtil ? +excelRawData[i].volumeUtil.toFixed(2) : 0,\n              \"Drop Seq\": excelRawData[i].dropSeq,\n              \"Arrived Bay\": this.service.customDateTimeFormat(excelRawData[i].bayArrivedDate),\n              \"Print LS\": this.service.customDateTimeFormat(excelRawData[i].lsPrintDate),\n              \"Send For Barcode\": this.service.customDateTimeFormat(excelRawData[i].sendForBarcodeDate),\n              \"Loading Start\": this.service.customDateTimeFormat(excelRawData[i].loadingStartDate),\n              \"Loading End\": this.service.customDateTimeFormat(excelRawData[i].loadingEndDate),\n              \"Confirm\": this.service.customDateTimeFormat(excelRawData[i].confirmedDate),\n              \"Release\": this.service.customDateTimeFormat(excelRawData[i].releaseDate),\n              \"Insert User\": excelRawData[i].insertUser,\n              \"Update User\": excelRawData[i].updateUser,\n              \"Loadslip Comments\": excelRawData[i].comments,\n              \"Status\": excelRawData[i].status,\n              \"MKT Seg\": excelRawData[i].marketSegment,\n              \"Cust Inv Num\": excelRawData[i].customInvoiceNumber\n            }\n            newExcelData.push(data)\n          }\n          const workBook = XLSX.utils.book_new(); // create a new blank book\n          const workSheet = XLSX.utils.json_to_sheet(newExcelData);\n          XLSX.utils.book_append_sheet(workBook, workSheet, 'data'); // add the worksheet to the book\n          XLSX.writeFile(workBook, 'CancelLoadslips.xlsx');\n          this.isLoading = false;\n        } else {\n          this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n          this.isLoading = false;\n        }\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    } else {\n      this.toastr.error(\"No records found to export\", \"Error!\");\n    }\n\n  }\n\n  addEvent(type, event) {\n    if (event.target.value) {\n      /* Checking if selected from date greater than to date.\n      Clearing the toDate field when from date greater than to date */\n      let checkToDate: any = this.toDate;\n      console.log(\"Check--->1\", checkToDate);\n      if (this.toDate == this.currentDateAsString) {\n        // on page load we are defaluting the  to date with string. Comparing string with date is not possible\n        // If toDate is equal to currentDate then chagetingthe checkDate to new Date() otherwise defaulting with toDate\n        checkToDate = new Date();\n        console.log(\"Check--->2\", checkToDate);\n\n      }\n      if (this.toDate && (this.fromDate > checkToDate)) {\n        this.toDate = '';\n      }\n    }\n  }\n\n  showComments(comment) {\n    this.integrationMsg = comment;\n    $('#integrationMsgModal').modal('show');\n  }\n\n  getMarketSegment() {\n    this.service.get_service(ApiserviceService.apisList.getMarketSegment).subscribe(response => {\n      if (response['statusCode'] == '200') {\n        this.mktsegmentList = response['data'];\n      } else {\n        this.toastr.error(response['message'] ? response['message'] : 'Some Thing Went Wrong !!!')\n      }\n    })\n  }\n\n  //server side pagination\n  datatablePageData(pageInfo: { count?: number, pageSize?: number, limit?: number, offset?: number }) {\n    this.forDateValidation();\n    let obj = this.countryList ? (this.countryList.find(a => a.description == this.destCountryName)) : {};\n    let bodyData = {\n      'fromCreatedDate': this.fromCreatedDate,\n      'toCreatedDate': this.toCreatedDate,\n      'index': pageInfo.offset,\n      'pageLength': pageInfo.pageSize,\n      'marketSegment': this.mktsegment,\n      'destination': this.destination,\n      'invoice': this.invoice,\n      'itemId': this.materialCode,\n      'loadslipId': this.loadSlipId,\n      'stopType': this.type,\n      'transhipment': this.transhipment,\n      'shipmentId': this.shipmentId,\n      'truckType': this.truckType,\n      'type': loadslipStatus.cancelled,\n      'status': this.statusList,\n      \"truckNumber\": this.truckNumber,\n      \"containerNum\": this.container,\n      \"source\": this.sourceCode,\n      \"transporter\": this.transporter,\n      \"destCountry\": obj ? (obj.value) : ''\n    }\n    this.getCancelLoadSlipData(bodyData);\n  }\n\n  // filter Transporter details\n  getfilterTransporter(event) {\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.transporterList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?transporter=' + filtervalue).subscribe(response => {\n        this.transporterList = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  viewDraftLoadSlipData(loadSlipData) {\n    let loadSlipId = loadSlipData.loadslipId;\n    let type = loadSlipData.type;\n    if (loadSlipId != null) {\n      if (type == 'FGS_EXP') {\n        this.router.navigateByUrl('/load-slip-view-for-export/' + loadSlipId);\n      } else if (type == 'JIT_OEM') {\n        this.router.navigateByUrl('/load-slip-view-for-jit/' + loadSlipId);\n      } else {\n        this.router.navigateByUrl('/load-slip-view/' + loadSlipId);\n      }\n    }\n  }\n  getUserDestinationList(event) {\n    this.destination = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.getDestinationDescriptionDataList + event.target.value).subscribe(response => {\n        if (response['data']) {\n          this.descriptionList = response['data'].searchResult;\n        }\n        this.isLoading = false;\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  //set value destination\n  setDestination(value) {\n    //  this.destinationDesc = value;\n    this.destination = value;\n  }\n\n  //set value to destination description\n  setDestDescription(value) {\n    this.destinationDesc = value;\n  }\n\n  // Filter source location\n  getfilterSource(event) {\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.sourceList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?destination=' + filtervalue).subscribe(response => {\n        console.log(\"respio\", response)\n        this.sourceList = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n\n  //get filter destination result\n  countryOfDestinationFilter(event, type) {\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?' + type + '=' + filtervalue).subscribe(response => {\n        if (response['statusCode'] == 200) {\n          this.countryList = [];\n          this.countryList = response['data'].searchResult;\n          this.isLoading = false;\n        } else {\n          this.isLoading = false;\n          this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n        }\n\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { customMaterialModule } from '../../angular-material';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { LoaderModule } from '../../public/loader/loader-shared.module';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { CancelledLoadslipsComponent } from './cancelled-loadslips.component';\nimport { CustomDatePipeModule } from 'src/app/date-pipe-shared.module';\n\nconst routes: Routes = [\n  { path: '', component: CancelledLoadslipsComponent},\n  { path: ':loadslipId', component: CancelledLoadslipsComponent},\n];\n\n@NgModule({\n  imports: [\n    [RouterModule.forChild(routes)],\n    CommonModule,\n    customMaterialModule,\n    ReactiveFormsModule,\n    FormsModule,\n    LoaderModule,\n    NgxDatatableModule,\n    CustomDatePipeModule\n  ],\n  declarations: [\n    CancelledLoadslipsComponent\n  ],\n  providers:\n    [\n    ],\n})\nexport class cancelledLoadslipModule { }\n"],"sourceRoot":""}