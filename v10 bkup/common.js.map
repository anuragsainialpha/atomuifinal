{"version":3,"sources":["webpack:///./src/app/public/date.adapters.ts","webpack:///./src/app/services/auth-guard/planner-auth-guard.service.ts","webpack:///./src/app/services/helper-service/helper-service.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { NativeDateAdapter, DateAdapter, MAT_DATE_FORMATS, MatDateFormats } from \"@angular/material\";\n\n\nexport class AppDateAdapter extends NativeDateAdapter {\n\n    parse(value: any): Date | null {\n        if ((typeof value === 'string') && (value.indexOf('/') > -1)) {\n          const str = value.split('/');\n          const year = Number(str[2]);\n          const month = Number(str[1]) - 1;\n          const date = Number(str[0]);\n          return new Date(year, month, date);\n        }\n        const timestamp = typeof value === 'number' ? value : Date.parse(value);\n        return isNaN(timestamp) ? null : new Date(timestamp);\n      }\n   format(date: Date, displayFormat: string): string {\n       if (displayFormat == \"input\") {\n          let day = date.getDate();\n          let month = date.getMonth() + 1;\n          let year = date.getFullYear();\n          return this._to2digit(day) + '/' + this._to2digit(month) + '/' + year;\n       } else if (displayFormat == \"inputMonth\") {\n          let month = date.getMonth() + 1;\n          let year = date.getFullYear();\n          return  this._to2digit(month) + '/' + year;\n       } else {\n           return date.toDateString();\n       }\n   }\n\n   private _to2digit(n: number) {\n       return ('00' + n).slice(-2);\n   } \n}\n\nexport const APP_DATE_FORMATS =\n{\n   parse: {\n       dateInput: {month: 'short', year: 'numeric', day: 'numeric'}\n   },\n   display: {\n       // dateInput: { month: 'short', year: 'numeric', day: 'numeric' },\n       dateInput: 'input',\n       // monthYearLabel: { month: 'short', year: 'numeric', day: 'numeric' },\n       monthYearLabel: 'inputMonth',\n       dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n       monthYearA11yLabel: {year: 'numeric', month: 'long'},\n   }\n}","import { Injectable } from '@angular/core';\nimport { ApiserviceService } from '../api/apiservice.service';\nimport { constants } from '../../constants';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlannerAuthGuardService {\n  userRoles: any;\n  constructor(\n    private service: ApiserviceService,\n    private activateRouter:ActivatedRoute,\n    private router:Router\n  ) {\n    this.userRoles = constants.roles;\n  }\n  canActivate() {\n    if (this.service.checkLogin() && ((this.service.checkRole() == this.userRoles.planner1) || (this.service.checkRole() == this.userRoles.planner2) || (this.service.checkRole() == this.userRoles.planner3))) {\n      return true\n    }\n    else{\n      localStorage.setItem(\"authToken\", '');\n      localStorage.setItem(\"role\",\"\");\n      localStorage.setItem(\"sourceID\",\"\");\n      localStorage.setItem(\"userMenu\",\"\");\n      localStorage.setItem(\"userName\",\"\");\n      this.router.navigateByUrl(\"/\");\n    }\n  }\n}\n","import { ApiserviceService } from './../api/apiservice.service';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\nimport { Injectable } from '@angular/core';\nimport * as moment from 'moment'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperServiceService {\n\n  constructor(\n    private toastr:ToastrService,\n    private service:ApiserviceService\n  ) { }\n\n  getTodayDate(){\n   return moment(new Date()).format('DD/MM/YYYY');\n  }\n  getTodayDateASString(){\n    return new Date().toISOString();\n  }\n\n  alphaNumericOnly(e){\n    var regex = new RegExp(\"^[a-zA-Z0-9]+$\");\n    var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);\n    if (regex.test(str)) {\n        return true;\n    }\n    e.preventDefault();\n    return false;\n  }\n\n  numericOnly(e){\n    var regex = new RegExp(\"^[0-9]+$\");\n    var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);\n    if (regex.test(str)) {\n        return true;\n    }\n    e.preventDefault();\n    return false;\n  }\n\n  getDestinationDescList(destId):any{\n    console.log(destId);\n    this.service.get_service(ApiserviceService.apisList.getDestinationDescriptionDataList+destId).subscribe(async response=>{\n      await response;\n      if(response['statusCode'] == 200) {\n        if(response['data']){\n          return response['data'].searchResult;\n         //  this.getDestinationDescList = response['data'].searchResult;\n        }\n      }\n    },error=>{\n    })\n  }\n\n  getDateValidations(gatInFrDate,gateIntoDate,gateOutFrDate,gateoutToDate,reportFrDate,reportToDate){\n    let gateInDateValid = true;\n    let gateOutDateValid = true;\n    let reportDateValid = true;\n    if((gatInFrDate) && (gateIntoDate == \"\" || gateIntoDate == null || gateIntoDate == undefined)){\n      gateInDateValid = false;\n      this.toastr.error('Please give Gate In To Date')\n    }\n    if((gateOutFrDate) && (gateoutToDate == \"\" || gateoutToDate == null || gateoutToDate == undefined)){\n      gateOutDateValid = false\n      this.toastr.error('Please give Gate Out To Date')\n    }\n    if((reportFrDate) && (reportToDate == \"\" || reportToDate == null || reportToDate == undefined)){\n      reportDateValid = false\n      this.toastr.error('Please give Report To Date')\n    }\n    return (gateInDateValid && gateOutDateValid && reportDateValid)\n  }\n  \n}\n"],"sourceRoot":""}