{"version":3,"sources":["webpack:///./src/app/custom-date-pipe.ts","webpack:///./src/app/date-pipe-shared.module.ts","webpack:///./src/app/planner/manual-plan/manual-plan.component.html","webpack:///./src/app/planner/manual-plan/manual-plan.component.scss","webpack:///./src/app/planner/manual-plan/manual-plan.component.ts","webpack:///./src/app/planner/manual-plan/manual-plan.module.ts","webpack:///./src/app/public/manual-plan-success-dialog/manual-plan-success-dialog.component.html","webpack:///./src/app/public/manual-plan-success-dialog/manual-plan-success-dialog.component.scss","webpack:///./src/app/public/manual-plan-success-dialog/manual-plan-success-dialog.component.ts"],"names":[],"mappings":"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","file":"planner-manual-plan-manual-plan-module.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Formats a /Date(XXXXXXXXXXXXXXXX)/ string into a JSON Date object\n * Takes an argument as input of actual date value in /Date(XXXXXXXXXXXXXXXX)/ format.\n * Usage:\n * date-value | customDateFormat\n * Example:\n * {{ '/Date(1402034400000)/' | customDateFormat}}\n * formats to: \"2014-06-06T06:00:00.000Z\" \n*/\n@Pipe({ name: \"customDateFormat\", pure: true })\nexport class CustomDateFormat implements PipeTransform {\n  transform(\n    value: any,\n    valuesplitindexvalues: string,\n    finalDate: string\n  ): number {\n    if (value) {\n      valuesplitindexvalues = value.split(\"/\");\n      finalDate =\n        valuesplitindexvalues[1] +\n        \"/\" +\n        valuesplitindexvalues[0] +\n        \"/\" +\n        valuesplitindexvalues[2];\n      console.log(valuesplitindexvalues);\n      console.log(finalDate);\n    }\n\n    if (finalDate) {\n      var myDate = new Date(finalDate).getTime();\n      return myDate;\n    }\n    console.log(finalDate);\n    \n  }\n}","import { NgModule} from '@angular/core';\nimport { CustomDateFormat } from './custom-date-pipe';\n\n\n@NgModule({\n  imports: [\n   \n  ],\n  declarations: [\n    CustomDateFormat\n  ],\n  exports:[\n    CustomDateFormat\n  ]\n})\n\nexport class CustomDatePipeModule { }\n","module.exports = \"<app-loader *ngIf=\\\"isLoading\\\"></app-loader>\\n<div class=\\\"container-fluid\\\">\\n  <h6 class=\\\"manulal-plan-header\\\">\\n    <b>Create Plan > Manual Plan</b>\\n  </h6>\\n  <!-- Create Plan by Manual Fields 1st row-->\\n\\n  <div class=\\\"manualplan-fields\\\">\\n    <form name=\\\"form\\\" #f=\\\"ngForm\\\" (ngSubmit)=\\\"(f.form.valid && checkIfMaterialCodeIsTyre(f))\\\">\\n      <div class=\\\"col-md-12 row\\\">\\n        <div class=\\\"col-md-12 padding-right-40\\\">\\n            <div class=\\\"row tab-loadslip-fields\\\">\\n        <div class=\\\"col-md-1 pr-0\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Dispatch Date\\\" [min]=\\\"minDate\\\" disabled [matDatepicker]=\\\"createplanDate\\\"\\n                autocomplete=\\\"off\\\" [(ngModel)]=\\\"planDate\\\" name=\\\"plandate\\\" required #dispatachbleDate=\\\"ngModel\\\">\\n              <mat-datepicker-toggle matSuffix [for]=\\\"createplanDate\\\"></mat-datepicker-toggle>\\n              <mat-datepicker #createplanDate disabled=\\\"false\\\"></mat-datepicker>\\n              <mat-error *ngIf=\\\"(f.submitted && dispatachbleDate.invalid)\\\">\\n                <p *ngIf=\\\"dispatachbleDate.errors.required\\\"> Dispatch Date is\\n                  <strong>required</strong>\\n                </p>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-1 pr-0\\\">\\n          <div class=\\\"form-group\\\">\\n            <ng-container *ngIf=\\\"(check_DP_REP_Role == roles.planner3 || check_DP_REP_Role == roles.L1MGR || check_DP_REP_Role == roles.L2MGR);else otherUsers\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Source\\\" (keyup)=\\\"getfilterSource($event)\\\" autocomplete=\\\"off\\\"\\n                  [matAutocomplete]=\\\"sourceAutocomplete\\\" [(ngModel)]=\\\"plant\\\" name=\\\"source\\\" #sourceLoc=\\\"ngModel\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\"\\n                  required>\\n                <mat-autocomplete #sourceAutocomplete=\\\"matAutocomplete\\\">\\n                  <mat-option *ngFor=\\\"let list of sourceList\\\" [value]=\\\"list.value\\\">\\n                    <span matTooltip={{list.value}}>{{list.value}} - ({{list.description}})</span>\\n                  </mat-option>\\n                </mat-autocomplete>\\n                <mat-error *ngIf=\\\"(f.submitted && sourceLoc.invalid)\\\">\\n                  <p *ngIf=\\\"sourceLoc.errors.required\\\">Source is\\n                    <strong>required</strong>\\n                  </p>\\n                </mat-error>\\n              </mat-form-field>\\n            </ng-container>\\n            <ng-template #otherUsers>\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Source\\\" name=\\\"plant\\\" [(ngModel)]=\\\"plant\\\" disabled #sourceLocation=\\\"ngModel\\\"\\n                  required autocomplete=\\\"off\\\">\\n                <mat-error *ngIf=\\\"(f.submitted && sourceLocation.invalid)\\\">\\n                  <p *ngIf=\\\"sourceLocation.errors.required\\\">Source is\\n                    <strong>required</strong>\\n                  </p>\\n                </mat-error>\\n              </mat-form-field>\\n            </ng-template>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-1 pr-0\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Destination\\\" (keyup)=\\\"getfilterDestination($event)\\\" autocomplete=\\\"off\\\"\\n                [matAutocomplete]=\\\"statesAutocomplete\\\" [(ngModel)]=\\\"destination\\\" name=\\\"destination\\\"\\n                #destinationLocation=\\\"ngModel\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\" required>\\n              <mat-autocomplete #statesAutocomplete=\\\"matAutocomplete\\\">\\n                <mat-option *ngFor=\\\"let list of destinationList\\\" [value]=\\\"list.value\\\" (click)=\\\"setDestinationDescription(list.description)\\\"\\n                  (onSelectionChange)=\\\"setDestinationDescription(list.description)\\\">\\n                  <span matTooltip={{list.description}}>{{list.value}} - ({{list.description}})</span>\\n                </mat-option>\\n              </mat-autocomplete>\\n              <mat-error *ngIf=\\\"(f.submitted && destinationLocation.invalid)\\\">\\n                <p *ngIf=\\\"destinationLocation.errors.required\\\">Destination is\\n                  <strong>required</strong>\\n                </p>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-2 pr-0\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Destination Description\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"destDisAutocomplete\\\"\\n              [(ngModel)]=\\\"destinationDesc\\\" name=\\\"destinationDesc\\\" (keyup)=\\\"getUserDestinationList($event)\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n            <mat-autocomplete #destDisAutocomplete=\\\"matAutocomplete\\\">\\n              <mat-option *ngFor=\\\"let list of descriptionList\\\" [value]=\\\"list.description\\\" (click)=\\\"setDestination(list.value)\\\"\\n                (onSelectionChange)=\\\"setDestination(list.value)\\\">\\n                <span>({{list.description}})</span>\\n              </mat-option>\\n            </mat-autocomplete>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-2 pr-0\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Material code\\\" [matAutocomplete]=\\\"materilalcodeAutocomplete\\\" autocomplete=\\\"off\\\"\\n                [(ngModel)]=\\\"materialCode\\\" name=\\\"materilaCode\\\" (keyup)=\\\"getUserSearchMaterial($event)\\\" #materialcode=\\\"ngModel\\\"\\n                oninput=\\\"this.value = this.value.toUpperCase()\\\" required>\\n              <mat-autocomplete #materilalcodeAutocomplete=\\\"matAutocomplete\\\">\\n                <mat-option *ngFor=\\\"let list of materilcodelist\\\" [value]=\\\"list.value\\\" (click)=\\\"setMaterialDescription(list.description)\\\"\\n                  (onSelectionChange)=\\\"setMaterialDescription(list.description)\\\">\\n                  <span>{{list.value}}</span>\\n                </mat-option>\\n              </mat-autocomplete>\\n              <mat-error *ngIf=\\\"(f.submitted && materialcode.invalid)\\\">\\n                <p *ngIf=\\\"materialcode.errors.required\\\">Material Code is\\n                  <strong>required</strong>\\n                </p>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-2 pr-0\\\">\\n          <div class=\\\"form-group\\\">\\n            <!-- <mat-form-field >\\n            <mat-label>Material Description</mat-label>\\n            <input matInput [(ngModel)]=\\\"MaterialDescription\\\" name=\\\"description\\\" disabled required #materialDesc=\\\"ngModel\\\">\\n            <mat-error *ngIf=\\\"(f.submitted && materialDesc.invalid)\\\">\\n              <p *ngIf=\\\"materialDesc.errors.required\\\">Material Description is\\n                <strong>required</strong>\\n              </p>\\n            </mat-error>\\n          </mat-form-field> -->\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Material description\\\" [matAutocomplete]=\\\"materilalDespAutocomplete\\\"\\n                autocomplete=\\\"off\\\" [(ngModel)]=\\\"MaterialDescription\\\" name=\\\"description\\\" (keyup)=\\\"filterMaterialDescription($event)\\\"\\n                #materialDesc=\\\"ngModel\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\" required>\\n              <mat-autocomplete #materilalDespAutocomplete=\\\"matAutocomplete\\\">\\n                <mat-option *ngFor=\\\"let list of materialDescriptionList\\\" [value]=\\\"list.description\\\" (click)=\\\"setMaterialCode(list.value)\\\"\\n                  (onSelectionChange)=\\\"setMaterialCode(list.value)\\\">\\n                  <span>{{list.description}}</span>\\n                </mat-option>\\n              </mat-autocomplete>\\n              <mat-error *ngIf=\\\"(f.submitted && materialDesc.invalid)\\\">\\n                <p *ngIf=\\\"materialDesc.errors.required\\\">Material Description is\\n                  <strong>required</strong>\\n                </p>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-2 pr-0\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field>\\n              <mat-select placeholder=\\\"Batch Code\\\" [(ngModel)]=\\\"batchCode\\\" name=\\\"batchCode\\\" #batchcode=\\\"ngModel\\\"\\n                required>\\n                <mat-option [value]=\\\"\\\">None</mat-option>\\n                <mat-option *ngFor=\\\"let batchCode of batchCodeList\\\" [value]=\\\"batchCode\\\">\\n                  {{batchCode}}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"(f.submitted && batchcode.invalid)\\\">\\n                <p *ngIf=\\\"batchcode.errors.required\\\">Batch code is\\n                  <strong>required</strong>\\n                </p>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-1\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Quantity\\\" [(ngModel)]=\\\"quanitity\\\" name=\\\"quanitity\\\" type=\\\"number\\\"\\n                autocomplete=\\\"off\\\" required #qty=\\\"ngModel\\\" (keypress)=\\\"service.numberOnly($event)\\\">\\n              <mat-error *ngIf=\\\"(f.submitted && qty.invalid)\\\">\\n                <p *ngIf=\\\"qty.errors.required\\\">Quantity is\\n                  <strong>required</strong>\\n                </p>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-1 pr-0\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field>\\n              <mat-select placeholder=\\\"Priority\\\" [(ngModel)]=\\\"priority\\\" name=\\\"priority\\\" #prior=\\\"ngModel\\\">\\n                <mat-option [value]=\\\"\\\">None</mat-option>\\n                <mat-option *ngFor=\\\"let priority of priorityList\\\" [value]=\\\"priority\\\">\\n                  {{priority}}\\n                </mat-option>\\n              </mat-select>\\n              <!-- <mat-error *ngIf=\\\"(f.submitted && prior.invalid)\\\">\\n                <p *ngIf=\\\"prior.errors.required\\\">Priority is\\n                  <strong>required</strong>\\n                </p>\\n              </mat-error> -->\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-2 pr-0\\\">\\n          <div class=\\\"form-group comments\\\">\\n            <mat-form-field>\\n              <textarea matInput class=\\\"commentsTextArea\\\" [(ngModel)]=\\\"comments\\\" name=\\\"comments\\\" autocomplete=\\\"off\\\"\\n                placeholder=\\\"Comments\\\"></textarea>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        \\n        </div>\\n        \\n        </div>\\n        <div class=\\\"pull-right\\\">\\n            <div class=\\\"search-fileds\\\">\\n              <button class=\\\"theme-small-button\\\" type=\\\"submit\\\" matTooltip=\\\"Add Plan\\\">\\n                <i class=\\\"fa fa-plus\\\" aria-hidden=\\\"true\\\"></i>\\n              </button>\\n              <!-- <button class=\\\"theme-delete-button\\\" (click)=\\\"clearAll(f)\\\" matTooltip=\\\"Clear All\\\">\\n              <i class=\\\"fa fa-times\\\" aria-hidden=\\\"true\\\"></i>\\n            </button> -->\\n            </div>\\n          </div>\\n      </div>\\n    </form>\\n  </div>\\n\\n  <div class=\\\"clearfix\\\"></div>\\n  <!-- manual plan Details Table -->\\n  <div class=\\\"datatable ngx-table-custom-scroll ngx-table-tr-custom-scroll\\\">\\n    <ngx-datatable class='material' [rows]='planData' [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [limit]=\\\"100\\\"\\n      [footerHeight]=\\\"30\\\" [rowHeight]=\\\"'auto'\\\">\\n      <ngx-datatable-column name=\\\"Dispatch Date\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"dispatchDate\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.dispatchDate | customDateFormat | date:'dd-MMM-yyyy'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Source\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"sourceLocation\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.sourceLocation}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Destination\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"destinationLocation\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.destinationLocation}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Dest Description\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"destinationLocation\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.destDis}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Material Code\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"materialCode\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.materialCode}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Material Description\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"materialDescription\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.materialDescription}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n\\n      <ngx-datatable-column name=\\\"Batch Code\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"batchCode\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.batchCode}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Quantity\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"quantity\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.quantity}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Priority\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"priority\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.priority}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Comments\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"comments\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.comments}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Action\\\" prop=\\\"id\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"false\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-id=\\\"value\\\">\\n          <button class=\\\"theme-delete-button\\\" (click)=\\\"deletePlan(row)\\\">\\n            <i class=\\\"fa fa-trash-o fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\n          </button>\\n\\n        </ng-template>\\n      </ngx-datatable-column>\\n    </ngx-datatable>\\n  </div>\\n  <div class=\\\"clearfix\\\"></div>\\n  <div align=\\\"center\\\">\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"btm-action-btn\\\" (click)=\\\"createManualPlan()\\\" *ngIf=\\\"(planData.length>0)\\\">Create\\n      plan</button>\\n  </div>\\n  <div class=\\\"error-log\\\" *ngIf=\\\"IsErrorLog\\\">\\n    <mat-card>\\n      <mat-list role=\\\"list\\\">\\n        <mat-list-item *ngFor=\\\"let data of ErrorData\\\">{{data}}</mat-list-item>\\n      </mat-list>\\n    </mat-card>\\n  </div>\\n</div>\\n\\n<!--  Freight Availble or Not Show Modal After creation of Indent -->\\n<!-- The Modal -->\\n<div class=\\\"modal\\\" id=\\\"errorModal\\\" data-keyboard=\\\"false\\\" data-backdrop=\\\"static\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <!-- Modal Header -->\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title text-center\\\">Errors !!</h4>\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n      </div>\\n      <!-- Modal body -->\\n      <div class=\\\"modal-body error-log\\\">\\n        <!-- <p class=\\\"text-primary text-center \\\">{{responseData}}</p> -->\\n        <!-- <mat-card class=\\\"no\\\">\\n          <mat-list role=\\\"list\\\">\\n            <mat-list-item *ngFor=\\\"let data of ErrorData\\\">{{data}}</mat-list-item>\\n          </mat-list>\\n        </mat-card> -->\\n        <ul>\\n          <li *ngFor=\\\"let data of ErrorData\\\">{{data}}</li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".manualplan-fields {\\n  background-color: transparent;\\n  box-shadow: none;\\n  padding: 0px; }\\n  .manualplan-fields p > i {\\n    cursor: pointer; }\\n  .manualplan-fields .col-md-3 {\\n    padding: 0px 15px; }\\n  .manualplan-fields .wid-12p {\\n    flex: 0 0 12%;\\n    max-width: 12%; }\\n  .manualplan-fields .wid-13p {\\n    flex: 0 0 13%;\\n    max-width: 13%; }\\n  .manualplan-fields .form-group {\\n    margin-bottom: 0; }\\n  .manualplan-fields .form-group .mat-form-field .mat-form-field-wrapper {\\n      padding-bottom: 0.5em !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGxhbm5lci9tYW51YWwtcGxhbi9DOlxcVXNlcnNcXEFiaGV5U29vZFxcT25lRHJpdmUgLSBBY2NlbGFscGhhIFNvZnR3YXJlIFB2dC4gTHRkXFxEZXNrdG9wXFxhdG9tIGFwb2xsb1xcQXBvbGxvXFxOZXctIEFudXJhZ1xcYXRvbS11aS9zcmNcXGFwcFxccGxhbm5lclxcbWFudWFsLXBsYW5cXG1hbnVhbC1wbGFuLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBO0VBQ0ksNkJBQTZCO0VBQzdCLGdCQUFnQjtFQUNoQixZQUFZLEVBQUE7RUFIaEI7SUFLUSxlQUFlLEVBQUE7RUFMdkI7SUFRUSxpQkFBaUIsRUFBQTtFQVJ6QjtJQVdRLGFBQWE7SUFDYixjQUFjLEVBQUE7RUFadEI7SUFlUSxhQUFhO0lBQ2IsY0FBYyxFQUFBO0VBaEJ0QjtJQW1CUSxnQkFBZ0IsRUFBQTtFQW5CeEI7TUFzQmdCLGdDQUFnQyxFQUFBIiwiZmlsZSI6InNyYy9hcHAvcGxhbm5lci9tYW51YWwtcGxhbi9tYW51YWwtcGxhbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgJy4uLy4uLy4uL2Fzc2V0cy9zdHlsZXMvdmFyaWFibGVzJztcbkBpbXBvcnQgJy4uLy4uLy4uL2Fzc2V0cy9zdHlsZXMvbWl4aW5zJztcblxuXG4ubWFudWFscGxhbi1maWVsZHN7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBwYWRkaW5nOiAwcHg7XG4gICAgcCA+IGl7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gICAgLmNvbC1tZC0ze1xuICAgICAgICBwYWRkaW5nOiAwcHggMTVweDtcbiAgICB9XG4gICAgLndpZC0xMnB7XG4gICAgICAgIGZsZXg6IDAgMCAxMiU7XG4gICAgICAgIG1heC13aWR0aDogMTIlO1xuICAgIH1cbiAgICAud2lkLTEzcHtcbiAgICAgICAgZmxleDogMCAwIDEzJTtcbiAgICAgICAgbWF4LXdpZHRoOiAxMyU7XG4gICAgfVxuICAgIC5mb3JtLWdyb3Vwe1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAubWF0LWZvcm0tZmllbGQge1xuICAgICAgICAgICAgLm1hdC1mb3JtLWZpZWxkLXdyYXBwZXJ7XG4gICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDAuNWVtICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il19 */\"","import { HelperServiceService } from './../../services/helper-service/helper-service.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS, MatAutocomplete, MatAutocompleteTrigger, MatDialog, ErrorStateMatcher, ShowOnDirtyErrorStateMatcher } from '@angular/material';\nimport { AppDateAdapter, APP_DATE_FORMATS } from '../../public/date.adapters';\nimport { fromEvent } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport { ApiserviceService } from '../../services/api/apiservice.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { ManualPlanSuccessDialogComponent } from '../../public/manual-plan-success-dialog/manual-plan-success-dialog.component';\nimport { NgForm, AbstractControl, FormGroup } from '@angular/forms';\nimport * as  moment from 'moment'\nimport { constants } from 'src/app/constants';\n\ndeclare var $: any;\n@Component({\n  selector: 'app-manual-plan',\n  templateUrl: './manual-plan.component.html',\n  styleUrls: ['./manual-plan.component.scss'],\n  providers: [\n    {\n      provide: DateAdapter, useClass: AppDateAdapter\n    },\n    {\n      provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS\n    },\n    { provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher }\n  ]\n})\nexport class ManualPlanComponent implements OnInit {\n  @ViewChild('f') form: any;\n  planData = [];\n  planDate: string;\n  plant = '';\n  destination = '';\n  materialCode = '';\n  description = \"\";\n  batchCode = '';\n  quanitity = \"\";\n  priority = \"\";\n  mktsigment = \"\";\n  source = '';\n  index: number = 0;\n  destinationList = [];\n  materilcodelist = [];\n  // batchCodelist = [];\n  minDate = new Date();\n  IsErrorLog: boolean = false;\n  ErrorData: any;\n  // formattedDate = '';\n  MaterialDescription = '';\n  isLoading: boolean = false;\n  isValiData: boolean = false;\n  manualplanDate = {\n    planitems: []\n  }\n  roles: any;\n  check_DP_REP_Role: string;\n  priorityList = [1, 2, 3];\n  materialDescriptionList: any[];\n  batchCodeList = [];\n  sourceList: any[];\n  descriptionList = [];\n  destinationDesc: string;\n  comments: any;\n  batchCodePrefixList: any = [];\n  checkBatchCode: boolean = false;\n  constructor(\n    public service: ApiserviceService,\n    private toastr: ToastrService,\n    private dialog: MatDialog,\n    private helperService: HelperServiceService\n  ) { }\n\n\n  ngOnInit() {\n    this.check_DP_REP_Role = this.service.checkRole();\n    this.roles = constants.roles;\n    localStorage.setItem(\"userMenu\", \"create-plan\");\n    if (this.check_DP_REP_Role == this.roles.planner3 || this.check_DP_REP_Role == this.roles.L2MGR || this.check_DP_REP_Role == this.roles.L2MGR) {\n      this.plant = '';\n    } else {\n      this.plant = localStorage.getItem(\"sourceID\");\n    }\n    this.planDate = this.helperService.getTodayDateASString();\n    // for getting batch code master data\n    this.getBatchCodeMasterData();\n    this.getBatchCodePrefixes();\n  }\n\n  // for getting batch code master data from server\n  getBatchCodeMasterData() {\n    this.isLoading = true;\n    this.service.get_service(ApiserviceService.apisList.batchCodeMasterData).subscribe(response => {\n      this.batchCodeList = response['data'];\n      this.isLoading = false;\n    }, (err) => {\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n  }\n  deletePlan(row) {\n    let findIndex = this.planData.indexOf(row);\n    this.planData.splice(findIndex, 1);\n    this.planData = [...this.planData];\n    console.log(this.planData)\n  }\n\n\n  //get materialcode and coorsponding Description also\n  getUserSearchMaterial(event) {\n    this.MaterialDescription = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.materilcodelist = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?materialCode=' + filtervalue).subscribe(response => {\n        console.log(\"respio\", response)\n        this.materilcodelist = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n    if (filtervalue == '') {\n      this.MaterialDescription = '';\n    }\n\n  }\n\n  // Filter source location\n  getfilterSource(event) {\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.sourceList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?destination=' + filtervalue).subscribe(response => {\n        console.log(\"respio\", response)\n        this.sourceList = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n  getUserDestinationList(event) {\n    this.destination = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.getDestinationDescriptionDataList + event.target.value).subscribe(response => {\n        if (response['data']) {\n          this.descriptionList = response['data'].searchResult;\n        }\n        this.isLoading = false;\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  //set value destination\n  setDestination(value) {\n    //  this.destinationDesc = value;\n    setTimeout(() => {\n      this.destination = value;\n    }, 200);\n  }\n\n  setDestinationDescription(value) {\n    setTimeout(() => {\n      this.destinationDesc = value;\n    }, 200);\n  }\n\n  //filter material description \n  filterMaterialDescription(event) {\n    this.materialCode = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.materialDescriptionList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?materialDesc=' + filtervalue).subscribe(response => {\n        console.log(\"respio\", response)\n        this.materialDescriptionList = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n\n  //set value for material code \n  setMaterialCode(value) {\n    setTimeout(() => {\n      this.materialCode = value;\n        }, 300);\n  }\n\n  checkIfMaterialCodeIsTyre(form : NgForm) {\n    console.log(\"In method\");\n\n    if (this.materialCode) {\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.checkMaterialCodeIsTyre + '?materialCode=' + this.materialCode).subscribe(response => {\n        if (response['statusCode'] == 200) {\n          this.isLoading = false;\n          this.checkBatchCode = response['data'];\n          console.log(\"batchCodeCheck\", this.checkBatchCode);\n          // Validating the form data\n          this.addplan(form);\n\n        }\n      }, err => {\n        this.isLoading = false;\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      })\n    }\n  }\n\n  getBatchCodePrefixes() {\n    this.service.get_service(ApiserviceService.apisList.getBatchCodePrefixes).subscribe(response => {\n      if (response['statusCode'] == 200) {\n        this.batchCodePrefixList = response['data'];\n      }\n    },\n      err => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n  }\n\n  //get bactch code data\n  // FilterBacthCode(event) {\n\n  //   let filtervalue = event.target.value;\n  //   if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n  //     this.batchCodelist = [];\n  //     this.isLoading = true;\n  //     this.service.get_service(ApiserviceService.apisList.searchFilter + '?batchCode=' + filtervalue).subscribe(response => {\n  //       console.log(\"respio\", response)\n  //       this.batchCodelist = response['data'].searchResult;\n  //       this.isLoading = false;\n  //     }, (err) => {\n  //       console.log(\"Error\", err);\n  //       this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n  //       this.isLoading = false;\n  //     })\n  //   }\n\n  // }\n\n  //get filter destination result\n  getfilterDestination(event) {\n    this.destinationDesc = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.destinationList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?destination=' + filtervalue).subscribe(response => {\n        console.log(\"respio\", response)\n        this.destinationList = response['data'].searchResult;\n        this.isLoading = false;\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  //Add plan date to Local\n  addplan(form: NgForm) {\n\n    let data = {\n      dispatchDate: this.planDate ? moment(this.planDate).format('DD/MM/YYYY') : '',\n      sourceLocation: this.plant,\n      destinationLocation: this.destination,\n      materialCode: this.materialCode,\n      materialDescription: this.MaterialDescription,\n      batchCode: this.batchCode,\n      quantity: this.quanitity,\n      priority: this.priority,\n      marketSegment: this.mktsigment,\n      destDis: this.destinationDesc,\n      comments: this.comments\n    }\n\n    const destinationCheck = this.destinationList.some(r => r.value === data.destinationLocation);\n    const materialcodeCheck = this.materilcodelist.some(r => r.value === data.materialCode);\n    if (this.planDate) {\n      if (destinationCheck) {\n        if (materialcodeCheck) {\n          if (Number(data.quantity) == 0) {\n            this.toastr.error(\"Quantity should be greater than 0\")\n          } else {\n\n            if (data.marketSegment.length > 10) {\n              this.toastr.error('Market segment length can not be more than 10 characters')\n            } else {\n              console.log(\"beforeIf\");\n              if (this.checkBatchCode) {\n                let index = this.batchCodePrefixList.findIndex(item => item.LOCATIONID === data.sourceLocation);\n                // index will be -1 when the given source has no batchCode prefix to check\n                if (index != -1) {\n                  // Check th batch code prefix for plant locations and ext_warehouse locs\n                  let plantLocDetails = this.batchCodePrefixList[index]\n                  if (this.batchCode.startsWith(plantLocDetails.BATCHCODEPREFIX)) {\n                    this.addDataToTable(data)\n                    form.resetForm(); // or form.reset()\n                    this.checkBatchCode = false;\n                  } else {\n                    this.toastr.error('Batch code ' + data.batchCode + ' is not valid for source loc ' + data.sourceLocation);\n                  }\n                } else {\n                  //When Source other than the plant locs 1007,1001,1002,1004 and ext_warehouse TNR2,TNR4,TNR5,TNR6,TNR7\n                  //No need to check for batch prefix\n                  this.addDataToTable(data);\n                  form.resetForm(); // or form.reset()  \n                  this.checkBatchCode = false;\n                }\n              } else {\n                this.addDataToTable(data);\n                form.resetForm(); // or form.reset()\n                this.checkBatchCode = false;\n              }\n\n            }\n          }\n        } else {\n          let checkMaterialDescription = this.materialDescriptionList.some(r => r.description == data.materialDescription);\n          if (checkMaterialDescription) {\n            this.addDataToTable(data)\n            form.resetForm(); // or form.reset()\n            this.checkBatchCode = false;\n          } else {\n            this.toastr.error('Material code not valid. Please select material code from list');\n            this.materialCode = '';\n            this.MaterialDescription = '';\n          }\n        }\n      } else {\n        const checkDestinationDescription = this.descriptionList.some(a => a.description == data.destDis)\n        if (checkDestinationDescription) {\n          this.addDataToTable(data)\n          form.resetForm(); // or form.reset()\n          this.checkBatchCode = false;\n        } else {\n          this.toastr.error('Destination code not valid. Please select destination from list');\n        }\n      }\n    } else {\n      this.toastr.error('Please enter Dispatch Date')\n\n    }\n  }\n\n  addDataToTable(data) {\n    this.planData.push(data);\n    this.destinationList = [];\n    this.materilcodelist = [];\n    this.sourceList = [];\n    setTimeout(() => {\n      if (this.check_DP_REP_Role == this.roles.planner3) {\n        this.plant = '';\n      } else {\n        this.plant = localStorage.getItem(\"sourceID\");\n      }\n      this.planDate = this.helperService.getTodayDateASString();\n    }, 200);\n    console.log(\"this is not valid data\")\n    this.planData = [...this.planData];\n  }\n\n  //open manual plan success creationb of plan\n  openDialog(value) {\n    const dialogRef = this.dialog.open(ManualPlanSuccessDialogComponent, {\n      // width: '250px',\n      data: { planId: value },\n      disableClose: true\n    });\n  }\n  //create plan \n  createManualPlan() {\n    let modifiedArr = []\n    for (let i = 0; i < this.planData.length; i++) {\n      let data = {\n        \"Dispatch Date\": this.planData[i].dispatchDate,\n        \"Source Location\": this.planData[i].sourceLocation,\n        \"Destination Location\": this.planData[i].destinationLocation,\n        \"Material Code\": this.planData[i].materialCode,\n        \"Material Description\": this.planData[i].materialDescription,\n        \"Batch Code\": this.planData[i].batchCode,\n        \"Quantity\": this.planData[i].quantity,\n        \"Priority\": this.planData[i].priority,\n        \"Marketing Segment\": this.planData[i].marketSegment,\n        \"Comments\": this.planData[i].comments\n      }\n      modifiedArr.push(data)\n    }\n    console.log(\"planData final changes\", modifiedArr)\n    let senddata = {\n      planItems: modifiedArr\n    }\n    console.log(senddata, \"senddata\")\n    this.isLoading = true;\n    this.service.post_service(ApiserviceService.apisList.plannerService, senddata).subscribe(response => {\n      console.log(\"repsonse of manual plan creation\", response);\n      if (response['statusCode'] == 200) {\n        this.isLoading = false;\n        this.planData = [];\n        this.toastr.success(response['data'].planStatus ? response['data'].planStatus : \"Plan Created successfully..\", \"Success!\");\n        let datamodal = {\n          status: response['data'].status,\n          planId: response['data'].planId,\n          message: response['data'].message,\n        }\n        this.openDialog(datamodal);\n      } else {\n        // this.isLoading = false;\n        // this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n        this.ErrorData = response['data'];\n        $('#errorModal').modal('show');\n        // this.toastr.error(this.ErrorData);\n        //this.IsErrorLog = true\n      }\n\n    }, (err) => {\n      console.log(\"Error\", err);\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n  }\n  //set material description value \n  setMaterialDescription(value) {\n    console.log(value)\n    setTimeout(() => {\n      this.MaterialDescription = value\n      // this.checkIfMaterialCodeIsTyre();\n    }, 200);\n  }\n\n\n  clearAll(form: NgForm) {\n    // form.resetForm(); // or form.reset();\n    form.reset();\n    setTimeout(() => {\n      this.plant = localStorage.getItem(\"sourceID\");\n    }, 200);\n    this.destinationList = [];\n    this.materilcodelist = [];\n    // this.batchCodelist = [];\n  }\n}\n\n\n\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { customMaterialModule } from '../../angular-material';\nimport { ManualPlanComponent } from './manual-plan.component';\nimport { FormsModule } from '@angular/forms';\nimport { LoaderModule } from '../../public/loader/loader-shared.module';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { ManualPlanSuccessDialogComponent } from '../../public/manual-plan-success-dialog/manual-plan-success-dialog.component';\nimport { PlannerAuthGuardService } from '../../services/auth-guard/planner-auth-guard.service';\nimport { CustomDatePipeModule } from 'src/app/date-pipe-shared.module';\n\nconst routes: Routes = [\n  { path: '', component: ManualPlanComponent},\n];\n\n@NgModule({\n  imports: [\n    [RouterModule.forChild(routes)],\n    CommonModule,\n    customMaterialModule,\n    FormsModule,\n    LoaderModule,\n    NgxDatatableModule,\n    CustomDatePipeModule\n  ],\n  declarations: [\n    ManualPlanComponent,\n    ManualPlanSuccessDialogComponent\n  ],\n  providers:\n    [\n      PlannerAuthGuardService\n    ],\n    entryComponents:[\n      ManualPlanComponent,\n      ManualPlanSuccessDialogComponent\n    ],\n})\nexport class manualPlanModule { }\n","module.exports = \"<mat-dialog-content class=\\\"mat-typography\\\">\\n  <h4 class=\\\"plan-created-success\\\" > {{data.planId.message}} !!\\n    \\n    <!-- Plan With Out errors -->\\n    <ng-container *ngIf=\\\"data.planId.status != 'PLAN_PENDING'\\\">\\n    <!-- FGS PLANNER, DP_REP, L1_MGR AND L2_MGR -->\\n    <a [routerLink]=\\\"['/dispatch-plan/approve-plans',data.planId.planId]\\\" *ngIf=\\\"(service.checkRole() == userRoles.planner1) || (service.checkRole() == userRoles.planner2) \\n      || (service.checkRole() == userRoles.planner3) || (service.checkRole() == userRoles.L1MGR) || (service.checkRole() == userRoles.L2MGR)\\\">\\n      <span (click)=\\\"onNoClick()\\\">{{data.planId.planId}}</span>\\n    </a>\\n    <!-- FGS OPERATION -->\\n    <a [routerLink]=\\\"['/fgs/approve-plans',data.planId.planId]\\\" *ngIf=\\\"(service.checkRole() == userRoles.fgsOperations1) || (service.checkRole() == userRoles.fgsOperations2) || \\n      (service.checkRole() == userRoles.fgsOperations3) || (service.checkRole() == userRoles.fgsOperations4)\\\">\\n      <span (click)=\\\"onNoClick()\\\">{{data.planId.planId}}</span>\\n    </a>\\n    <!-- RDC PLAN / OPERATION -->\\n    <a [routerLink]=\\\"['/rdc/approve-plans',data.planId.planId]\\\" *ngIf=\\\"(service.checkRole() == userRoles.rdc_PLN)\\\">\\n      <span (click)=\\\"onNoClick()\\\">{{data.planId.planId}}</span>\\n    </a>\\n      </ng-container>\\n\\n    <!-- Plan with errors -->\\n    <ng-container *ngIf=\\\"data.planId.status === 'PLAN_PENDING'\\\">\\n    <!-- FGS PLANNER, DP_REP, L1_MGR AND L2_MGR -->\\n    <a [routerLink]=\\\"['/plan/pending-plans/view-plan',data.planId.planId]\\\" *ngIf=\\\"(service.checkRole() == userRoles.planner1) || (service.checkRole() == userRoles.planner2) \\n      || (service.checkRole() == userRoles.planner3) || (service.checkRole() == userRoles.L1MGR) || (service.checkRole() == userRoles.L2MGR)\\\">\\n      <span (click)=\\\"onNoClick()\\\">{{data.planId.planId}}</span>\\n    </a>\\n    <!-- FGS OPERATION -->\\n    <a [routerLink]=\\\"['/fgs/pending-plans/view-plan/',data.planId.planId]\\\" *ngIf=\\\"(service.checkRole() == userRoles.fgsOperations1) || (service.checkRole() == userRoles.fgsOperations2) || \\n      (service.checkRole() == userRoles.fgsOperations3) || (service.checkRole() == userRoles.fgsOperations4)\\\">\\n      <span (click)=\\\"onNoClick()\\\">{{data.planId.planId}}</span>\\n    </a>\\n    <!-- RDC PLAN / OPERATION -->\\n    <a [routerLink]=\\\"['/rdc/pending-plans/view-plan',data.planId.planId]\\\" *ngIf=\\\"(service.checkRole() == userRoles.rdc_PLN)\\\">\\n      <span (click)=\\\"onNoClick()\\\">{{data.planId.planId}}</span>\\n    </a>\\n    </ng-container>\\n   \\n  </h4>\\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"end\\\">\\n\\n  <button mat-stroked-button color=\\\"primary\\\" [mat-dialog-close]=\\\"false\\\" cdkFocusInitial>Close</button>\\n</mat-dialog-actions>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3B1YmxpYy9tYW51YWwtcGxhbi1zdWNjZXNzLWRpYWxvZy9tYW51YWwtcGxhbi1zdWNjZXNzLWRpYWxvZy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ApiserviceService } from 'src/app/services/api/apiservice.service';\nimport { constants } from 'src/app/constants';\n\n@Component({\n  selector: 'app-manual-plan-success-dialog',\n  templateUrl: './manual-plan-success-dialog.component.html',\n  styleUrls: ['./manual-plan-success-dialog.component.scss']\n})\nexport class ManualPlanSuccessDialogComponent implements OnInit {\n  userRoles: any;\n  message:any;\n  constructor(\n    public service: ApiserviceService,\n    public dialogRef: MatDialogRef<ManualPlanSuccessDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: plan\n  ) { }\n\n\n  ngOnInit() {\n    this.userRoles = constants.roles;\n    console.log(this.data)\n  }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n\nexport interface plan {\n  status: string,\n  plan_ID: '',\n  message:string,\n  planId:any\n}"],"sourceRoot":""}