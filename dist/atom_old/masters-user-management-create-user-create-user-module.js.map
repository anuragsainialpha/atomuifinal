{"version":3,"sources":["webpack:///./src/app/masters/user-management/create-user/create-user.component.html","webpack:///./src/app/masters/user-management/create-user/create-user.component.scss","webpack:///./src/app/masters/user-management/create-user/create-user.component.ts","webpack:///./src/app/masters/user-management/create-user/create-user.module.ts"],"names":[],"mappings":"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","file":"masters-user-management-create-user-create-user-module.js","sourcesContent":["module.exports = \"\\n<app-loader *ngIf=\\\"isLoading\\\"></app-loader>\\n<h6 class=\\\"mt-item-header\\\">\\n    <b> User Management &gt; Create User </b>\\n    </h6>\\n<br><br>\\n\\n<div class=\\\"create-user container-fluid\\\">\\n    <form #createUserForm=\\\"ngForm\\\" name=\\\"createUserForm\\\" (ngSubmit)=\\\"createUserForm.form.valid && createUser(createUserForm)\\\"> \\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-6\\\">\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-3\\\"></div>\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <mat-form-field>\\n                       <input matInput placeholder=\\\"User Id\\\" [(ngModel)]=\\\"userId\\\" name=\\\"userId\\\" required #qty=\\\"ngModel\\\">\\n                       <mat-error *ngIf=\\\"(createUserForm.submitted && qty.invalid)\\\">\\n                           <p *ngIf=\\\"qty.errors.required\\\">User Id is <strong>required</strong></p>\\n                         </mat-error>\\n                    </mat-form-field>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-3\\\"></div>\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <div class=\\\"form-group\\\">\\n                      <mat-form-field>\\n                          <mat-select placeholder=\\\"User Role Id\\\" [(ngModel)]=\\\"userRoleId\\\" name=\\\"userRoleId\\\" #qty=\\\"ngModel\\\" required>\\n                              <mat-option *ngFor=\\\"let loc of userRoleIds\\\" [value]=\\\"loc\\\">\\n                                {{loc}}\\n                              </mat-option>\\n                            </mat-select>\\n                            <mat-error *ngIf=\\\"(createUserForm.submitted)\\\">\\n                                <p *ngIf=\\\"(createUserForm.submitted && qty.invalid)\\\">User Role Id is <strong>required</strong></p>\\n                              </mat-error>\\n                      </mat-form-field>\\n                    </div>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-3\\\"></div>\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <mat-form-field>\\n                      <input matInput placeholder=\\\"First Name\\\" [(ngModel)]=\\\"firstName\\\"  name=\\\"firstName\\\" required oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                      <mat-error *ngIf=\\\"(createUserForm.submitted && qty.invalid)\\\">First Name is <strong>required</strong></mat-error>\\n                    </mat-form-field>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-3\\\"></div>\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <mat-form-field>\\n                      <input matInput placeholder=\\\"Last Name\\\" aria-label=\\\"State\\\" [(ngModel)]=\\\"lastName\\\"  name=\\\"lastName\\\" required oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                      <mat-error *ngIf=\\\"(createUserForm.submitted && qty.invalid)\\\">Last Name is <strong>required</strong></mat-error>\\n                    </mat-form-field>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"col-sm-6\\\">\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <mat-form-field>\\n                      <input type=\\\"text\\\" matInput placeholder=\\\"Email\\\"  aria-label=\\\"State\\\" \\n                      pattern=\\\"^(?!\\\\.)(?!.*\\\\.$)(?!.*?\\\\.\\\\.)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~\\\\-.]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\\\" #emailModel=\\\"ngModel\\\" [(ngModel)]=\\\"email\\\" name=\\\"email\\\" required>\\n                      \\n                      <!-- <div *ngIf=\\\"elinebreaker\\\">\\n                          <br><p class=\\\"mat-error mat-form-field-subscript-wrapper\\\"> {{emailerror}}</p>\\n                       </div> -->\\n                      <!-- <mat-error *ngIf=\\\"(createUserForm.submitted && email.required)\\\">Email is <strong>required</strong></mat-error>\\n                      <mat-error *ngIf=\\\"(createUserForm.submitted && email.pattern)\\\">Enrter a valid <strong>Email</strong></mat-error> -->\\n                      \\n                    <mat-error *ngIf=\\\"(createUserForm.submitted && emailModel.invalid) || (emailModel.invalid)\\\">\\n                      <p *ngIf=\\\"emailModel.errors.required\\\"> Email is\\n                        <strong>required</strong>\\n                      </p>\\n                      <p *ngIf=\\\"emailModel.errors.pattern\\\">Please enter valid  \\n                        <strong>email</strong>\\n                      </p>\\n                    </mat-error>\\n                    </mat-form-field>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <mat-form-field>\\n                        <mat-select placeholder=\\\"Plant Code\\\" [(ngModel)]=\\\"plantCode\\\" name=\\\"plantCode\\\" #qty=\\\"ngModel\\\" required>\\n                            <mat-option *ngFor=\\\"let loc of locationIds\\\" [value]=\\\"loc\\\">\\n                              {{loc}}\\n                            </mat-option>\\n                          </mat-select>\\n                          <mat-error *ngIf=\\\"(createUserForm.submitted)\\\">\\n                              <p *ngIf=\\\"(createUserForm.submitted && qty.invalid)\\\">Plant Code is <strong>required</strong></p>\\n                            </mat-error>\\n                      <!-- <mat-error *ngIf=\\\"plantCode.invalid && (createUserForm.submitted ||plantCode.touched)\\\">{{getErrorMessage(\\\"plantCode\\\")}}</mat-error> -->\\n                    </mat-form-field>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <mat-form-field>\\n                      <input matInput placeholder=\\\"Password\\\" aria-label=\\\"State\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\" name=\\\"password\\\" required>\\n                      <mat-error *ngIf=\\\"(createUserForm.submitted && qty.invalid)\\\">Password is <strong>required</strong></mat-error>\\n                    </mat-form-field>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-7\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <mat-form-field>\\n                      <input matInput placeholder=\\\"Confirm Password\\\" aria-label=\\\"State\\\"  (keyup)=\\\"onKeyUp($event)\\\" [(ngModel)]=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" required>\\n                      <mat-error *ngIf=\\\"(createUserForm.submitted && qty.invalid)\\\">Confirm Password is <strong>required</strong></mat-error>\\n                      <div *ngIf=\\\"linebreaker\\\">\\n                         <br><p class=\\\"mat-error mat-form-field-subscript-wrapper\\\"> {{values}}</p>\\n                      </div>\\n                     </mat-form-field>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-6\\\">\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-sm-3\\\">\\n                </div>\\n                <div class=\\\"col-sm-2\\\">\\n                  <button mat-raised-button class=\\\"btm-action-btn\\\">Create</button>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n     \\n        </div>\\n      </form>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21hc3RlcnMvdXNlci1tYW5hZ2VtZW50L2NyZWF0ZS11c2VyL2NyZWF0ZS11c2VyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, Validators, NgForm } from '@angular/forms';\nimport { ApiserviceService } from 'src/app/services/api/apiservice.service';\nimport { ToastrService } from 'ngx-toastr';\nimport * as XLSX from 'xlsx';\ndeclare var $: any;\n\n@Component({\n  selector: 'app-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.scss']\n})\nexport class CreateUserComponent implements OnInit {\n\n  @ViewChild('createUserForm') createUserForm: NgForm;\n  isLoading: boolean;\n\n  // userId = new FormControl('', [Validators.required, Validators.maxLength(30)]);\n  // //userRoleId = new FormControl('', [Validators.required]);\n  // firstName = new FormControl('', Validators.maxLength(30));\n  // lastName = new FormControl('', Validators.maxLength(30));\n  // email = new FormControl('', [Validators.required,Validators.email]);\n  // //plantCode = new FormControl('', [Validators.required]);\n  // password = new FormControl('', [Validators.required]);\n  // //confirmPassword = new FormControl('', [Validators.required]);\n\n\n  userId: any = \"\";\n  userRoleId : any = \"\";\n  firstName : any = \"\";\n  lastName : any = \"\";\n  email : any = \"\";\n  plantCode : any = \"\";\n  password: any = \"\";\n  confirmPassword : any = \"\";\n\n\n\n\n\n\n  constructor(\n    public service: ApiserviceService,\n    private toastr: ToastrService\n  ) { }\n\n\n  ngOnInit() {\n    localStorage.setItem(\"userMenu\", \"user-management\");\n    this.getUserRoleIds();\n    this.getLocationIds();\n  }\n\nlocationIds:any[]=[];  \nuserRoleIds:any[]=[];\nservProsArray:any[]=[];\n\ngetUserRoleIds() {\n  this.isLoading=true;\n  this.service.get_service(ApiserviceService.apisList.getUserRoleIdsList).subscribe(response => {\n    //console.log(\"response array string: \"+JSON.stringify(response));\n    this.userRoleIds = response['data'];\n  }, (err) => {\n    console.log(\"Error\", err);\n    this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n    this.isLoading = false;\n  })\n}\n\ngetLocationIds() {\n  this.service.get_service(ApiserviceService.apisList.getLocationIdsList).subscribe(response => {\n    //console.log(\"response array string: \"+JSON.stringify(response));\n    this.locationIds = response['data'];\n    this.isLoading=false;\n  }, (err) => {\n    console.log(\"Error\", err);\n    this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n    this.isLoading = false;\n  })\n}\n\n\n\n\n  hasErrors:boolean;\n\n  getErrorMessage(fieldName) {\n    if (fieldName === 'userId') {\n      return this.userId.hasError('required') ? 'You must enter a value' :\n        this.userId.hasError('maxlength') ? 'User Id can be max 30 characters long' :\n          '';\n    }\n    // else if (fieldName === 'userRoleId') {\n    //   return this.userRoleId.hasError('required') ? 'You must select a value' : '';\n    // }\n    else if (fieldName === 'firstName') {\n      return this.firstName.hasError('required') ? 'You must enter a value' :\n        this.firstName.hasError('maxlength') ? 'First Name can be max 30 characters long' :'';\n    }\n    else if (fieldName === 'lastName') {\n      return this.firstName.hasError('required') ? 'You must enter a value' :\n      this.lastName.hasError('maxlength') ? 'Last Name can be max 30 characters long' : '';\n    }\n    else if (fieldName === 'email') {\n      return this.email.hasError('required') ? 'You must enter a value' :\n      this.email.hasError('email') ? 'Not a valid email' :'';\n    }\n    // else if (fieldName === 'plantCode') {\n    //   return this.plantCode.hasError('required') ? 'You must enter a value' :'';\n    // }\n    else if (fieldName === 'password') {\n      return this.password.hasError('required') ? 'You must enter a value' : '';\n    }\n    else if (fieldName === 'confirmPassword') {\n      return this.confirmPassword.hasError('required') ? 'You must enter a value' :\n       this.password !== this.confirmPassword ? 'Passwords do not Match' :'';\n    }\n  }\n\n\n  checkHasErrors(){\n    if (this.createUserForm.valid) {\n      if(this.userId.value !==\"\" && this.userId.value !==\"\" && this.userId.value !==\"\"){\n      return false;\n      }\n    }\n  }\n\n  createUser(form: NgForm) {\n   // console.log(\"submit data: this.userRoleId.value \" + this.userRoleId);\n   // if(this.userRoleId==\"\")\nif(this.linebreaker==true || this.elinebreaker==true){\n  console.log(\"submit data: emptry return  \");\n  return \"\";\n}\n   if(this.userId !==\"\" && this.userRoleId !==\"\" && this.firstName !==\"\" && this.lastName !==\"\" && \n   this.email !==\"\" && this.plantCode !==\"\" && this.password !==\"\"  && this.confirmPassword !==\"\"){\n    let data = {\n      \"itemsList\": [ {\n      \"userId\": this.userId,\n      \"userRoleId\": this.userRoleId,\n      \"firstName\": this.firstName,\n      \"lastName\": this.lastName,\n      \"emailId\": this.email,\n      \"plantCode\": this.plantCode,\n      \"password\": this.password,\n      \"confirmPassword\": this.confirmPassword,\n      \"status\": 'ACTIVE',\n    }\n  ]\n    }\n    console.log(\"submit data:  \" + JSON.stringify(data));\n    this.service.post_service(ApiserviceService.apisList.uploadUser, data).subscribe(response => {\n      this.isLoading = false;\n      this.toastr.success(response['message']);\n      form.resetForm();\n    }, (err) => {\n      console.log(\"Error\", err);\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n\n   }\n  }\n\n\n\n  values = '';\n  emailerror = '';\n  linebreaker:boolean=false;\n  elinebreaker:boolean=false;\n    onKeyUp(event: any) {\n      //  this.values = event.target.value;\n        if(this.password != event.target.value){\n          this.values = \"Password do not match\";\n          this.linebreaker=true;\n        }else{\n          this.values =\"\";\n          this.linebreaker=false;\n        }\n    };\n\n\n    checkEmail(event: any) {\n        if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(event.target.value)){\n          this.elinebreaker=false;\n        }else{\n          this.emailerror =\"please enter valid email\";\n          this.elinebreaker=true;\n        }\n    };\n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n createUser11() {\n    console.log(\"submit data: this.userRoleId.value \" + this.userRoleId);\n    console.log(\"submit data: this.plantCode.value \" + this.plantCode);\n   \n   // if(this.userRoleId==\"\")\n   // this.hasErrors = this.checkHasErrors();\n   if(this.userId.value !==\"\" && this.userRoleId !==\"\" && this.firstName.value !==\"\" && this.lastName.value !==\"\" && \n   this.email.value !==\"\" && this.plantCode !==\"\" && this.password.value !==\"\"  && this.confirmPassword.value !==\"\"){\n    let data = {\n      \"itemsList\": [\n        {\n      \"userId\": this.userId.value,\n      \"userRoleId\": this.userRoleId,\n      \"firstName\": this.firstName.value,\n      \"lastName\": this.lastName.value,\n      \"emailId\": this.email.value,\n      \"plantCode\": this.plantCode,\n      \"password\": this.password.value,\n      \"confirmPassword\": this.confirmPassword.value,\n      \"status\": 'ACTIVE',\n    }\n  ]\n    }\n\n    console.log(\"submit data:  \" + JSON.stringify(data));\n\n    this.service.post_service(ApiserviceService.apisList.uploadUser, data).subscribe(response => {\n      this.isLoading = false;\n      this.toastr.success(response['message']);\n      this.createUserForm.reset();\n    }, (err) => {\n      console.log(\"Error\", err);\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n\n   }\n  }\n\n  upload() { }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CreateUserComponent } from './create-user.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoaderModule } from '../../../public/loader/loader-shared.module';\nimport { customMaterialModule } from '../../../angular-material';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\n\nconst routes: Routes = [\n  { path: '', component: CreateUserComponent }\n];\n\n@NgModule({\n  imports: [\n    [RouterModule.forChild(routes)],\n    CommonModule,\n    LoaderModule,\n    customMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxDatatableModule,\n  ],\n  declarations: [CreateUserComponent]\n})\nexport class CreateUserModule { }\n"],"sourceRoot":""}