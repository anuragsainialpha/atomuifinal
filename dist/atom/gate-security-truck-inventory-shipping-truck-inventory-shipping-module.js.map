{"version":3,"sources":["webpack:///./src/app/custom-date-pipe.ts","webpack:///./src/app/date-pipe-shared.module.ts","webpack:///./src/app/gate-security/truck-inventory-shipping/truck-inventory-shipping.component.html","webpack:///./src/app/gate-security/truck-inventory-shipping/truck-inventory-shipping.component.scss","webpack:///./src/app/gate-security/truck-inventory-shipping/truck-inventory-shipping.component.ts","webpack:///./src/app/gate-security/truck-inventory-shipping/truck-inventory-shipping.module.ts"],"names":[],"mappings":"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","file":"gate-security-truck-inventory-shipping-truck-inventory-shipping-module.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Formats a /Date(XXXXXXXXXXXXXXXX)/ string into a JSON Date object\n * Takes an argument as input of actual date value in /Date(XXXXXXXXXXXXXXXX)/ format.\n * Usage:\n * date-value | customDateFormat\n * Example:\n * {{ '/Date(1402034400000)/' | customDateFormat}}\n * formats to: \"2014-06-06T06:00:00.000Z\" \n*/\n@Pipe({ name: \"customDateFormat\", pure: true })\nexport class CustomDateFormat implements PipeTransform {\n  transform(\n    value: any,\n    valuesplitindexvalues: string,\n    finalDate: string\n  ): number {\n    if (value) {\n      valuesplitindexvalues = value.split(\"/\");\n      finalDate =\n        valuesplitindexvalues[1] +\n        \"/\" +\n        valuesplitindexvalues[0] +\n        \"/\" +\n        valuesplitindexvalues[2];\n      console.log(valuesplitindexvalues);\n      console.log(finalDate);\n    }\n\n    if (finalDate) {\n      var myDate = new Date(finalDate).getTime();\n      return myDate;\n    }\n    console.log(finalDate);\n    \n  }\n}","import { NgModule} from '@angular/core';\nimport { CustomDateFormat } from './custom-date-pipe';\n\n\n@NgModule({\n  imports: [\n   \n  ],\n  declarations: [\n    CustomDateFormat\n  ],\n  exports:[\n    CustomDateFormat\n  ]\n})\n\nexport class CustomDatePipeModule { }\n","module.exports = \"<app-loader *ngIf=\\\"isLoading\\\">\\n</app-loader>\\n<div class=\\\"container-fluid\\\">\\n  <h6 class=\\\"manulal-plan-header\\\"><b>Truck status > Truck Inventory > Shipping</b>\\n    <span class=\\\"pull-right refresh-span\\\">\\n      <button class=\\\"theme-small-button\\\" (click)=\\\"export()\\\" matTooltip=\\\"Export to excel\\\">\\n        <i class=\\\"fa fa-file-excel-o\\\" aria-hidden=\\\"true\\\"></i>\\n      </button>\\n      <button class=\\\"theme-small-button\\\" (click)=\\\"refreshData()\\\" matTooltip=\\\"Refresh\\\">\\n        <i class=\\\"fa fa-repeat fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\n      </button>\\n      <button class=\\\"theme-small-button\\\" (click)=\\\"showFilter()\\\" matTooltip=\\\"Filter\\\">\\n        <i class=\\\"fa fa-filter fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\n      </button>\\n    </span>\\n  </h6>\\n  <div class=\\\"clearfix\\\"></div>\\n  <div class=\\\"manualplan-fields\\\" *ngIf=\\\"isShow\\\">\\n      <form (submit)=\\\"truckstatusIndetsFilter()\\\">\\n    <div class=\\\"col-md-12 row\\\">\\n      <div class=\\\"col-md-12 padding-right-40\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-2 pr-0 pl-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <input matInput aria-label=\\\"Source\\\" placeholder=\\\"Source\\\"\\n                      (keyup)=\\\"getfilterDestination($event,'source', isIntransitTruck)\\\" autocomplete=\\\"off\\\"\\n                      [matAutocomplete]=\\\"sourceAutocomplete\\\" [(ngModel)]=\\\"source\\\" name=\\\"source\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                    <mat-autocomplete #sourceAutocomplete=\\\"matAutocomplete\\\">\\n                      <mat-option *ngFor=\\\"let list of sourceList\\\" [value]=\\\"list.value\\\">\\n                        <span matTooltip={{list.description}}>{{list.value}} - ({{list.description}})</span>\\n                      </mat-option>\\n                    </mat-autocomplete>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n              <!-- <div class=\\\"col-md-3 pr-0\\\">\\n                    <div class=\\\"form-group\\\">\\n                      <mat-form-field>\\n                        <input matInput aria-label=\\\"Destination\\\" placeholder=\\\"Destination\\\" (keyup)=\\\"getfilterDestination($event,'destination')\\\" autocomplete=\\\"off\\\"\\n                          [matAutocomplete]=\\\"destinationAutocomplete\\\" [(ngModel)]=\\\"destination\\\" name=\\\"destination\\\">\\n                        <mat-autocomplete #destinationAutocomplete=\\\"matAutocomplete\\\">\\n                          <mat-option *ngFor=\\\"let list of destinationList\\\" [value]=\\\"list.value\\\">\\n                            <span matTooltip={{list.description}}>{{list.value}} - ({{list.description}})</span>\\n                          </mat-option>\\n                        </mat-autocomplete>\\n                      </mat-form-field>\\n                    </div>\\n                  </div> -->\\n\\n              <div class=\\\"col-md-2 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                    <input matInput placeholder=\\\"Destination\\\" aria-label=\\\"Destination\\\" [matAutocomplete]=\\\"statesAutocomplete\\\"\\n                      [(ngModel)]=\\\"destination\\\" name=\\\"destination\\\" (keyup)=\\\"getfilterDestination($event,'destination', !isIntransitTruck)\\\"  oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                    <mat-autocomplete #statesAutocomplete=\\\"matAutocomplete\\\">\\n                      <mat-option *ngFor=\\\"let list of destinationList\\\" [value]=\\\"list.value\\\"\\n                        (click)=\\\"setDestDescription(list.description)\\\"\\n                        (onSelectionChange)=\\\"setDestDescription(list.description)\\\">\\n                        <span>{{list.value}}</span>\\n                      </mat-option>\\n                    </mat-autocomplete>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n              <div class=\\\"col-md-4 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                    <input matInput placeholder=\\\"Destination Description\\\" aria-label=\\\"Destination Description\\\"\\n                      [matAutocomplete]=\\\"destDisAutocomplete\\\" [(ngModel)]=\\\"destinationDesc\\\" name=\\\"destinationDesc\\\"\\n                      (keyup)=\\\"getUserDestinationList($event)\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                    <mat-autocomplete #destDisAutocomplete=\\\"matAutocomplete\\\">\\n                      <mat-option *ngFor=\\\"let list of descriptionList\\\" [value]=\\\"list.description\\\"\\n                        (click)=\\\"setDestination(list.value)\\\" (onSelectionChange)=\\\"setDestination(list.value)\\\">\\n                        <span>({{list.description}})</span>\\n                      </mat-option>\\n                    </mat-autocomplete>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n\\n              <div class=\\\"col-md-4 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <mat-select placeholder=\\\"Truck/Container Type\\\" [(ngModel)]=\\\"truckType\\\" name=\\\"truckType\\\" multiple>\\n                      <!-- <mat-option [value]=\\\"\\\">None</mat-option> -->\\n                      <mat-option *ngFor=\\\"let truck of truckList\\\" [value]=\\\"truck.value\\\"> {{truck.value}} </mat-option>\\n                    </mat-select>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n\\n\\n\\n\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-6\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <mat-form-field>\\n                  <input matInput aria-label=\\\"Country of Destination\\\" placeholder=\\\"Country of Destination\\\"\\n                    (keyup)=\\\"countryOfDestinationFilter($event,'destCountrySearch')\\\" autocomplete=\\\"off\\\"\\n                    [matAutocomplete]=\\\"dischargeAutocomplete\\\" [(ngModel)]=\\\"destCountryName\\\" name=\\\"destCountryName\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                  <mat-autocomplete #dischargeAutocomplete=\\\"matAutocomplete\\\">\\n                    <mat-option *ngFor=\\\"let country of countryList\\\" [value]=\\\"country.description\\\">\\n                      <span matTooltip={{country.description}}>{{country.value}} - ({{country.description}})</span>\\n                    </mat-option>\\n                  </mat-autocomplete>\\n                </mat-form-field>\\n              </div>\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <mat-form-field>\\n                  <input matInput [(ngModel)]=\\\"trckNumber\\\" name=\\\"truck number\\\" autocomplete=\\\"off\\\"\\n                    placeholder=\\\"Truck Number\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                </mat-form-field>\\n              </div>\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <input matInput aria-label=\\\"transporter\\\" placeholder=\\\"Transporter\\\"\\n                      (keyup)=\\\"getfilterTransporter($event)\\\" autocomplete=\\\"off\\\"\\n                      [matAutocomplete]=\\\"transporterAutocomplete\\\" [(ngModel)]=\\\"transporter\\\" name=\\\"transporter\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                    <mat-autocomplete #transporterAutocomplete=\\\"matAutocomplete\\\">\\n                      <mat-option *ngFor=\\\"let list of transporterList\\\" [value]=\\\"list.value\\\">\\n                        <span>{{list.value}}</span>\\n                      </mat-option>\\n                    </mat-autocomplete>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <mat-form-field>\\n                  <input matInput [(ngModel)]=\\\"shipmentId\\\" name=\\\"shipment\\\" autocomplete=\\\"off\\\" placeholder=\\\"Shipment Id\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                </mat-form-field>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3 pl-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <input matInput [(ngModel)]=\\\"indentId\\\" name=\\\"indentid\\\" placeholder=\\\"Indent Id\\\" autocomplete=\\\"off\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <input matInput [min]=\\\"minDate\\\" placeholder=\\\"Gate In From Date\\\" disabled\\n                      [matDatepicker]=\\\"gateInFromDatePicker\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"gateInFromDate\\\"\\n                      (dateChange)=\\\"addEvent('gateInDate', $event)\\\" name=\\\"gateInToDate\\\">\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"gateInFromDatePicker\\\"></mat-datepicker-toggle>\\n                    <mat-datepicker #gateInFromDatePicker disabled=\\\"false\\\"></mat-datepicker>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <mat-form-field>\\n                  <input matInput [min]=\\\"gateInFromDate\\\" placeholder=\\\"Gate In To Date\\\" disabled\\n                    [matDatepicker]=\\\"gateInToDatePicker\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"gateInToDate\\\"\\n                    name=\\\"gateInToDate\\\">\\n                  <mat-datepicker-toggle matSuffix [for]=\\\"gateInToDatePicker\\\"></mat-datepicker-toggle>\\n                  <mat-datepicker #gateInToDatePicker [disabled]=\\\"!gateInFromDate\\\"></mat-datepicker>\\n                </mat-form-field>\\n              </div>\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <input matInput [min]=\\\"minDate\\\" placeholder=\\\"Rep From Date\\\" disabled\\n                      [matDatepicker]=\\\"reportFromDatePicker\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"reportFromDate\\\"\\n                      (dateChange)=\\\"addEvent('repFromDate', $event)\\\" name=\\\"reportfromDate\\\">\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"reportFromDatePicker\\\"></mat-datepicker-toggle>\\n                    <mat-datepicker #reportFromDatePicker disabled=\\\"false\\\"></mat-datepicker>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n\\n\\n              <!-- <div class=\\\"col-md-3 pr-0\\\">\\n                    <div class=\\\"form-group\\\">\\n                      <mat-form-field>\\n                        <input matInput [min]=\\\"minDate\\\" placeholder=\\\"Gate Out From Date\\\" disabled [matDatepicker]=\\\"gateOutFromDatePicker\\\"\\n                          autocomplete=\\\"off\\\" [(ngModel)]=\\\"gateOutFromDate\\\" (dateChange)=\\\"addEvent('gateOutDate', $event)\\\"\\n                          name=\\\"gateoutFromDate\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"gateOutFromDatePicker\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #gateOutFromDatePicker disabled=\\\"false\\\"></mat-datepicker>\\n                      </mat-form-field>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"col-md-3 pr-0\\\">\\n                    <mat-form-field>\\n                      <input matInput [min]=\\\"gateOutFromDate\\\" placeholder=\\\"Gate Out To Date\\\" disabled [matDatepicker]=\\\"gateOutToDatePicker\\\"\\n                        autocomplete=\\\"off\\\" [(ngModel)]=\\\"gateOutToDate\\\" name=\\\"gateoutToDate\\\">\\n                      <mat-datepicker-toggle matSuffix [for]=\\\"gateOutToDatePicker\\\"></mat-datepicker-toggle>\\n                      <mat-datepicker #gateOutToDatePicker [disabled]=\\\"!gateOutFromDate\\\"></mat-datepicker>\\n                    </mat-form-field>\\n                  </div> -->\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-6\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <input matInput [min]=\\\"reportFromDate\\\" placeholder=\\\"Rep To Date\\\" disabled\\n                      [matDatepicker]=\\\"reportToDatePicker\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"reportToDate\\\"\\n                      name=\\\"reportToDate\\\">\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"reportToDatePicker\\\"></mat-datepicker-toggle>\\n                    <mat-datepicker #reportToDatePicker [disabled]=\\\"!reportFromDate\\\"></mat-datepicker>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n              <div class=\\\"col-md-2 pr-0\\\">\\n                <mat-form-field>\\n                  <mat-select placeholder=\\\"Bay Status\\\" [(ngModel)]=\\\"bayStatus\\\" name=\\\"bayStatus\\\" multiple>\\n                    <!-- <mat-option [value]=\\\"\\\">None</mat-option> -->\\n                    <mat-option *ngFor=\\\"let item of baystatusList\\\" [value]=\\\"item\\\"> {{item}} </mat-option>\\n                  </mat-select>\\n                </mat-form-field>\\n              </div>\\n              <div class=\\\"col-md-3 pr-0\\\">\\n                <mat-form-field>\\n                  <mat-select placeholder=\\\"Select Status\\\" name=\\\"status\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"statusType\\\" multiple>\\n                    <!-- <mat-option [value]=\\\"\\\">None</mat-option> -->\\n                    <mat-option *ngFor=\\\"let status of reportTruckStatusList\\\" [value]=\\\"status.value\\\">\\n                      {{status.key}}\\n                    </mat-option>\\n                  </mat-select>\\n                </mat-form-field>\\n              </div>\\n              <div class=\\\"col-md-2 pr-0\\\">\\n                <mat-form-field>\\n                  <mat-select placeholder=\\\"Rejection\\\" [(ngModel)]=\\\"rejection\\\" name=\\\"rejection\\\" multiple>\\n                    <!-- <mat-option [value]=\\\"\\\">None</mat-option> -->\\n                    <mat-option *ngFor=\\\"let item of rejectionList\\\" [value]=\\\"item\\\"> {{item}} </mat-option>\\n                  </mat-select>\\n                </mat-form-field>\\n              </div>\\n              <div class=\\\"col-md-2\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-form-field>\\n                    <mat-select placeholder=\\\"Ind Cat\\\" [(ngModel)]=\\\"materialGrp\\\" name=\\\"materialGrp\\\" multiple>\\n                      <mat-option *ngFor=\\\"let category of categoryList\\\" [value]=\\\"category\\\">{{category}}</mat-option>\\n                    </mat-select>\\n                  </mat-form-field>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"pull-right\\\">\\n        <div class=\\\"search-fileds\\\">\\n          <button class=\\\"theme-small-button\\\" type=\\\"submit\\\" matTooltip=\\\"Search\\\">\\n            <i class=\\\"fa fa-search fa-2x\\\" aria-hidden=\\\"true\\\"></i>\\n          </button>\\n          <button class=\\\"theme-delete-button\\\" type=\\\"button\\\" (click)=\\\"clearData()\\\" matTooltip=\\\"Clear All\\\">\\n            <i class=\\\"fa fa-times\\\" aria-hidden=\\\"true\\\"></i>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n      </form>\\n\\n    <!-- For FGS operations Table -->\\n    <ngx-datatable #table class='material  ngx-table-custom-scroll ngx-table-tr-custom-scroll'\\n      [rows]='fgsReportedTrucksIndents' [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [selected]=\\\"selected\\\"\\n      [selectionType]=\\\"'single'\\\" [footerHeight]=\\\"30\\\" [rowHeight]=\\\"'auto'\\\" [limit]=\\\"fgPage.limit\\\" [scrollbarH]=\\\"true\\\"\\n      [count]=\\\"fgPage.count\\\" [offset]=\\\"fgPage.offset\\\" (page)=\\\"FgsDatatablePageData($event)\\\" [externalPaging]=\\\"true\\\">\\n      <ngx-datatable-column [frozenLeft]=\\\"true\\\" name=\\\"Indent Id\\\" [width]=\\\"170\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"indentId\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.indentId}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column [frozenLeft]=\\\"true\\\" name=\\\"Truck Number\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"truckNumber\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\">\\n          {{row.truckNumber | uppercase}}\\n          <!-- <ng-container *ngIf=\\\"row.status === 'GATED_IN' || row.status == 'REPORTED'\\\">\\n              <div class=\\\"edit-field\\\" title=\\\"Double click to edit\\\" (click)=\\\"editing[rowIndex + '-truckNumber'] = true\\\" *ngIf=\\\"!editing[rowIndex + '-truckNumber']\\\">\\n                <span class=\\\"edit-label\\\">{{row.truckNumber | uppercase}}\\n                </span>\\n                <i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\\n              </div>\\n              <mat-form-field *ngIf=\\\"editing[rowIndex+ '-truckNumber']\\\">\\n                <input matInput [value]=\\\"row.truckNumber\\\" (blur)=\\\"updateValue($event, 'truckNumber', rowIndex)\\\">\\n              </mat-form-field>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"row.status !== 'GATED_IN' && row.status !== 'REPORTED'\\\">\\n                {{row.truckNumber | uppercase}}\\n            </ng-container> -->\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column [frozenLeft]=\\\"true\\\" name=\\\"Transporter\\\" [width]=\\\"130\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"transporter\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.transporter | uppercase}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column [frozenLeft]=\\\"true\\\" name=\\\"Dest\\\" [width]=\\\"90\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"destination\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.destination | uppercase}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Dest Description\\\" [width]=\\\"130\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"destDis\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.destDis}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Truck Type\\\" [width]=\\\"130\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"truckType\\\">\\n        <ng-template let-row=\\\"row\\\" let-rowIndex=\\\"rowIndex\\\" ngx-datatable-cell-template>\\n          {{row.truckType | uppercase}}\\n\\n          <!-- <ng-container *ngIf=\\\"row.status === 'GATED_IN' || row.status == 'REPORTED'\\\">\\n  \\n          <div class=\\\"edit-field\\\" title=\\\"Double click to edit\\\" (click)=\\\"editing[rowIndex + '-truckType'] = true\\\" *ngIf=\\\"!editing[rowIndex + '-truckType']\\\">\\n            <span class=\\\"edit-label\\\">{{row.truckType}}\\n            </span>\\n            <i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\\n          </div>\\n          <mat-form-field *ngIf=\\\"editing[rowIndex+ '-truckType']\\\">\\n              <mat-select autofocus placeholder=\\\"Truck Type\\\" \\n              [ngModel]=\\\"row.truckType\\\" name=\\\"Truck Type\\\" \\n              (ngModelChange)=\\\"updateValue($event,'marketSegment',rowIndex)\\\">\\n                <mat-option [value]=\\\"\\\">None</mat-option>\\n                <mat-option *ngFor=\\\"let truck of truckList\\\" [value]=\\\"truck.value\\\">\\n                  {{truck.value}}\\n                </mat-option>\\n              </mat-select>\\n          </mat-form-field>\\n          </ng-container>\\n          <ng-container *ngIf=\\\"row.status !== 'GATED_IN' && row.status !== 'REPORTED'\\\">\\n              {{row.truckType | uppercase}}\\n          </ng-container> -->\\n        </ng-template>\\n        <!-- <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.truckType | uppercase}}\\n        </ng-template> -->\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Report Date\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"reportedDate\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.reportedDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Truck Status\\\" [width]=\\\"90\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"status\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.status}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Bay Status\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"callStatus\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-row=\\\"row\\\">\\n          <!--  DR_REP role user only view data can't edit data -->\\n          <!-- DP_REP ROLE -->\\n          <ng-container *ngIf=\\\"(isDPREPRole());else otherUsersBAYSTATUS\\\">\\n            <span [ngClass]=\\\"{'btn btn-sm lightgreen-button':row.bayStatus == 'CALL'}\\\">{{row.bayStatus == 'CALL' ?\\n              'Called':row.bayStatus}}</span>\\n          </ng-container>\\n          <ng-template #otherUsersBAYSTATUS>\\n            <!--  for other user other than DP_REP -->\\n            <ng-container *ngIf=\\\"row.bayStatus == '' || row.bayStatus == null\\\">\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"table-btn\\\" (click)=\\\"callGateSecurity(row)\\\">Call</button>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"row.bayStatus != ''\\\">\\n              <span [ngClass]=\\\"{'btn btn-sm lightgreen-button':row.bayStatus == 'CALL'}\\\">{{row.bayStatus == 'CALL' ?\\n                'Called':row.bayStatus}}</span>\\n            </ng-container>\\n          </ng-template>\\n          <!-- <ng-container *ngIf=\\\"(row.bayStatus != 'RELEASE')\\\">\\n            <button class=\\\"btn btn-sm lightgreen-button\\\" *ngIf=\\\"(row.callStatus) != null\\\">{{row.callStatus}}</button>\\n            <button\\n              *ngIf=\\\"(row.callStatus == null && row.inWeight == null) || (row.callStatus == '' && row.inWeight == '')\\\"\\n              mat-raised-button color=\\\"primary\\\" class=\\\"table-btn\\\" (click)=\\\"callGateSecurity(row)\\\">Call</button>\\n          </ng-container>\\n          <ng-container *ngIf=\\\"(row.bayStatus == 'RELEASE')\\\">\\n            {{row.bayStatus}}\\n          </ng-container> -->\\n\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"In weight (Kg)\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"inWeight\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\">\\n          <span>{{row.inWeight}}</span>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Gate In\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"gateInDate\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\">\\n          {{row.gateInDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Out Weight (Kg)\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"outWeight\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\">\\n          <span>{{row.outWeight}}</span>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Net Weight (Kg)\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"netWeight\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.netWeight}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"SAP invoice weight(Kg)\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" prop=\\\"dropSeq\\\"\\n        [sortable]=\\\"true\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.sapInvWeight}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Weight Diff (Kg)\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"netWeight\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          <span [ngClass]=\\\"(row.weightDiffStatus)?'text-danger':''\\\">{{row.diffInvWeight}}</span>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Gate Out\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"gateOutDate\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\">\\n          <span>{{row.gateOutDate | customDateFormat | date:'dd-MMM-yyyy,HH:mm' || '--'}}</span>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Loadslip Comments\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"loadslipComments\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          <div [title]=\\\"row.loadslipComments\\\" [ngClass]=\\\"{'cursor-pointer':row.loadslipComments?.length>12}\\\"\\n            (click)=\\\"ShowComments(row.loadslipComments,'loadslip')\\\" *ngIf=\\\"(row.loadslipComments)\\\">\\n            {{(row.loadslipComments?.length>12) ? (row.loadslipComments | slice:0:12)+'..':(row.loadslipComments)}}\\n          </div>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Gate Comments\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"comments\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          <!-- <button class=\\\"theme-small-button\\\" matTooltip=\\\"Comments\\\" (click)=\\\"ShowComments(row.comments,'comments')\\\" *ngIf=\\\"(row.comments)\\\">\\n            <i class=\\\"fa fa-commenting-o\\\" aria-hidden=\\\"true\\\"></i>\\n          </button> -->\\n          <div [title]=\\\"row.comments\\\" [ngClass]=\\\"{'cursor-pointer':row.comments?.length>8}\\\"\\n            (click)=\\\"ShowComments(row.comments,'comments')\\\" *ngIf=\\\"(row.comments)\\\">\\n            {{(row.comments?.length>8) ? (row.comments | slice:0:8)+'..':(row.comments)}}\\n          </div>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Rejection\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"rejectionStatus\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.rejectionStatus}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Rejection Desc\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"rejectionDesc\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.rejectionDesc}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n\\n      <!--  DR_REP role user only view data can't edit data -->\\n      <ng-container *ngIf=\\\"(!isDPREPRole())\\\">\\n        <!--  for other user other than DP_REP -->\\n        <ngx-datatable-column name=\\\"Action\\\" [width]=\\\"440\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"false\\\" prop=\\\"netWeight\\\">\\n          <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"table-btn mr-10\\\" *ngIf=\\\"(row.status=='GATED_IN')\\\"\\n              (click)=\\\"openTruckModel(row,rowIndex)\\\" [disabled]=\\\"(row.rejectionStatus) == 'REJECTED'\\\">\\n              Reject Truck\\n            </button>\\n            <!-- <button mat-raised-button color=\\\"primary\\\" class=\\\"table-btn\\\" (click)=\\\"saveTruck(row)\\\" [disabled]=\\\"(row.rejectionStatus) == 'REJECTED'\\\">\\n                  Save Truck\\n                </button> -->\\n\\n            <ng-container>\\n              <button mat-raised-button color=\\\"primary\\\" (click)=\\\"viewLoadslip(row.shipmentId,'loadslipView')\\\"\\n                [disabled]=\\\"!row.shipmentId\\\" class=\\\"table-btn mr-10\\\">View\\n                Loadslips\\n              </button>\\n              <button mat-raised-button color=\\\"primary\\\" (click)=\\\"viewLoadslip(row.shipmentId,'invoiceView')\\\"\\n                [disabled]=\\\"!row.shipmentId\\\" class=\\\"table-btn\\\">LoadSlip\\n                Invoice\\n              </button>\\n            </ng-container>\\n          </ng-template>\\n        </ngx-datatable-column>\\n      </ng-container>\\n      <ngx-datatable-column name=\\\"Driver Name\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"driverName\\\">\\n        <!-- <ng-template let-row=\\\"row\\\" let-rowIndex=\\\"rowIndex\\\" ngx-datatable-cell-template>\\n              <div class=\\\"edit-field\\\" title=\\\"Double click to edit\\\" (click)=\\\"editing[rowIndex + '-driverName'] = true\\\" *ngIf=\\\"!editing[rowIndex + '-driverName']\\\">\\n                <span class=\\\"edit-label\\\">{{row.driverName}}\\n                </span>\\n                <i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\\n              </div>\\n              <mat-form-field *ngIf=\\\"editing[rowIndex+ '-driverName']\\\">\\n                <input matInput [value]=\\\"row.driverName\\\" (blur)=\\\"updateValue($event, 'driverName', rowIndex)\\\">\\n              </mat-form-field>\\n            </ng-template> -->\\n        <ng-template let-row=\\\"row\\\" let-rowIndex=\\\"rowIndex\\\" ngx-datatable-cell-template>\\n          {{row.driverName}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Driver Number\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"driverContact\\\">\\n        <ng-template let-row=\\\"row\\\" let-rowIndex=\\\"rowIndex\\\" ngx-datatable-cell-template>\\n          {{row.driverContact}}\\n          <!-- <ng-container *ngIf=\\\"row.status === 'GATED_IN' || row.status == 'REPORTED'\\\">\\n            <div class=\\\"edit-field\\\" title=\\\"Double click to edit\\\" (click)=\\\"editing[rowIndex + '-driverContact'] = true\\\" \\n             *ngIf=\\\"!editing[rowIndex + '-driverContact']\\\">\\n              <span class=\\\"edit-label\\\">{{row.driverContact}}</span>\\n              <i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\\n            </div>\\n            <mat-form-field *ngIf=\\\"editing[rowIndex+ '-driverContact']\\\">\\n              <input matInput [value]=\\\"row.driverContact\\\" (keypress)=\\\"service.numberOnly($event)\\\" (blur)=\\\"updateValue($event, 'driverContact', rowIndex)\\\">\\n            </mat-form-field>\\n          </ng-container>\\n          <ng-container *ngIf=\\\"row.status !== 'GATED_IN' && row.status !== 'REPORTED'\\\">\\n            {{row.driverContact}}\\n          </ng-container> -->\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Driver Licence\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"driverLicense\\\">\\n        <ng-template let-row=\\\"row\\\" let-rowIndex=\\\"rowIndex\\\" ngx-datatable-cell-template>\\n          {{row.driverLicense}}\\n          <!-- <ng-container *ngIf=\\\"row.status === 'GATED_IN' || row.status == 'REPORTED'\\\">\\n              <div class=\\\"edit-field\\\" title=\\\"Double click to edit\\\" (click)=\\\"editing[rowIndex + '-driverLicense'] = true\\\" \\n               *ngIf=\\\"!editing[rowIndex + '-driverLicense']\\\">\\n                <span class=\\\"edit-label\\\">{{row.driverLicense}}</span>\\n                <i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\\n              </div>\\n              <mat-form-field *ngIf=\\\"editing[rowIndex+ '-driverLicense']\\\">\\n                <input matInput [value]=\\\"row.driverLicense\\\" (blur)=\\\"updateValue($event, 'driverLicense', rowIndex)\\\">\\n              </mat-form-field>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"row.status !== 'GATED_IN' && row.status !== 'REPORTED'\\\">\\n              {{row.driverLicense}}\\n            </ng-container> -->\\n        </ng-template>\\n      </ngx-datatable-column>\\n\\n      <ngx-datatable-column name=\\\"ShipmentId\\\" [width]=\\\"130\\\" [resizeable]=\\\"true\\\" [sortable]=\\\"false\\\" prop=\\\"shipmentId\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.shipmentId | uppercase}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n\\n      <ngx-datatable-column name=\\\"Container\\\" [width]=\\\"90\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"containerNum\\\">\\n        <ng-template let-row=\\\"row\\\" let-rowIndex=\\\"rowIndex\\\" ngx-datatable-cell-template>\\n          {{row.containerNum | uppercase}}\\n          <!-- <ng-container *ngIf=\\\"row.status === 'GATED_IN' || row.status == 'REPORTED'\\\">\\n            <div class=\\\"edit-field\\\" title=\\\"Double click to edit\\\" (click)=\\\"editing[rowIndex + '-containerNum'] = true\\\" *ngIf=\\\"!editing[rowIndex + '-containerNum']\\\">\\n              <span class=\\\"edit-label\\\">{{row.containerNum | uppercase}}\\n              </span>\\n              <i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\\n            </div>\\n            <mat-form-field *ngIf=\\\"editing[rowIndex+ '-containerNum']\\\">\\n              <input matInput [value]=\\\"row.containerNum\\\" (blur)=\\\"updateValue($event, 'containerNum', rowIndex)\\\">\\n            </mat-form-field>\\n          </ng-container>\\n          <ng-container *ngIf=\\\"row.status !== 'GATED_IN' && row.status !== 'REPORTED'\\\">\\n            {{row.containerNum | uppercase}}\\n          </ng-container> -->\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Bay\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"bayAssigned\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template let-rowIndex=\\\"rowIndex\\\">\\n          <!--  DR_REP role user only view data can't edit data -->\\n          <!-- DP_REP ROLE -->\\n          <ng-container *ngIf=\\\"(isDPREPRole());else otherUsersBAY\\\">\\n            {{row.bayAssigned}}\\n          </ng-container>\\n          <ng-template #otherUsersBAY>\\n            <!--  for other user other than DP_REP -->\\n            <div class=\\\"edit-field\\\" title=\\\"Double click to edit\\\"\\n              (click)=\\\"editingFgs[rowIndex + '-bayAssigned'] = true\\\" *ngIf=\\\"!editingFgs[rowIndex + '-bayAssigned']\\\">\\n              <span class=\\\"edit-label\\\">{{row.bayAssigned?row.bayAssigned:'None'}}</span>\\n              <i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\\n            </div>\\n            <mat-form-field *ngIf=\\\"editingFgs[rowIndex+ '-bayAssigned']\\\">\\n              <mat-select (selectionChange)=\\\"updateValueFgs($event, 'bayAssigned', rowIndex,row)\\\">\\n                <mat-option value=\\\"\\\">None</mat-option>\\n                <mat-option *ngFor=\\\"let data of plantBayList\\\" [value]=\\\"data\\\">\\n                  {{data}}\\n                </mat-option>\\n              </mat-select>\\n            </mat-form-field>\\n          </ng-template>\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"SAP invoice value(INR)\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" prop=\\\"dropSeq\\\"\\n        [sortable]=\\\"true\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.sapInvValue}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Eway bill No\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" prop=\\\"dropSeq\\\" [sortable]=\\\"true\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.ewayBillNo}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Source\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.source | uppercase}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"LR Num\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.lrNum}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"LR Date\\\" [width]=\\\"150\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.lrDate ? (row.lrDate | customDateFormat | date:'dd-MMM-yyyy') : '--'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Indent Cat\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.indentCategory}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"SAP Invoice\\\" [width]=\\\"120\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.sapInvoice}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Tot Tyre\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.totTyre}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Tot Tube\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.totTube}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Tot Flap\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.totFlap }}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Tot Valve\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.totValve}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Tot PCTR\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.totPctr}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Other Qty\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.otherQty}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Tot Qty\\\" [width]=\\\"70\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"source\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.totQty}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Country of Destination\\\" [width]=\\\"200\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"destCountryName\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.destCountryName}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Gate Serial No\\\" [width]=\\\"200\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"gateControlCode\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.gateControlCode}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"PUC\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"puc\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.puc)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Insurance\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"insurance\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.insurance)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Seat Belt\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"seatBelt\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.seatBelt)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"First Aid\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"firstAid\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.firstAid)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Fire Extenguisher\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"fireExtenguisher\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.fireExtenguisher)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Emergency Card\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"emergencyCard\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.emergencyCard)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Spark Arrestor\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"sparKArrestor\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.sparKArrestor)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Fitness Certificate\\\" [width]=\\\"100\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\"\\n        prop=\\\"fitnessCert\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{(row.fitnessCert)?'Yes':'No'}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Insert User\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"insertUser\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.insertUser}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <ngx-datatable-column name=\\\"Update User\\\" [width]=\\\"80\\\" [resizeable]=\\\"false\\\" [sortable]=\\\"true\\\" prop=\\\"updateUser\\\">\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\n          {{row.updateUser}}\\n        </ng-template>\\n      </ngx-datatable-column>\\n      <!-- Footer Template starts -->\\n      <ngx-datatable-footer>\\n        <ng-template ngx-datatable-footer-template let-rowCount=\\\"rowCount\\\" let-pageSize=\\\"pageSize\\\"\\n          let-selectedCount=\\\"selectedCount\\\" let-curPage=\\\"curPage\\\" let-offset=\\\"offset\\\" let-isVisible=\\\"isVisible\\\">\\n          <div class=\\\"page-count\\\">\\n            <span *ngIf=\\\"selectedCount\\\">\\n              {{selectedCount.toLocaleString()}} Selected |\\n            </span>\\n            Showing {{(offset * pageSize)+1}} to {{(rowCount>\\n            (curPage*pageSize))?(curPage*pageSize):(rowCount)}} of\\n            {{(rowCount)}} records.\\n          </div>\\n          <datatable-pager [pagerLeftArrowIcon]=\\\"'datatable-icon-left'\\\" [pagerRightArrowIcon]=\\\"'datatable-icon-right'\\\"\\n            [pagerPreviousIcon]=\\\"'datatable-icon-prev'\\\" [pagerNextIcon]=\\\"'datatable-icon-skip'\\\" [page]=\\\"curPage\\\"\\n            [size]=\\\"pageSize\\\" [count]=\\\"rowCount\\\" [hidden]=\\\"!((rowCount / pageSize) > 1)\\\"\\n            (change)=\\\"table.onFooterPage($event)\\\">\\n          </datatable-pager>\\n        </ng-template>\\n      </ngx-datatable-footer>\\n      <!-- Footer Template Ends -->\\n\\n    </ngx-datatable>\\n  </div>\\n\\n\\n\\n  <!-- View Loadslips  for coorsponding shipment -->\\n  <div class=\\\"modal\\\" id=\\\"loadslipsModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n      <div class=\\\"modal-content\\\">\\n        <!-- Modal Header -->\\n        <div class=\\\"modal-header\\\">\\n          <h4 class=\\\"modal-title\\\">Loadslip List</h4>\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n        </div>\\n        <!-- Modal body -->\\n        <div class=\\\"modal-body\\\">\\n          <ul>\\n            <li *ngFor=\\\"let item of loadslipList;let i=index\\\">\\n              <span>\\n                {{i+1}})\\n                <span class=\\\"link\\\" style=\\\"margin-left: 10px;margin-right: 50px\\\"\\n                  (click)=\\\"viewLoadslipnavigation(item)\\\">{{item.loadlipId}}\\n                </span>\\n                <span>\\n                  {{item.type}}\\n                </span>\\n              </span>\\n            </li>\\n          </ul>\\n        </div>\\n        <!-- Modal footer -->\\n        <div class=\\\"modal-footer\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\">Close</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <!-- truck Reject Modal -->\\n  <div class=\\\"modal\\\" id=\\\"rejectionModel\\\">\\n    <div class=\\\"modal-dialog\\\">\\n      <div class=\\\"modal-content\\\">\\n        <!-- Modal Header -->\\n        <div class=\\\"modal-header\\\">\\n          <h4 class=\\\"modal-title\\\">Reject Reason</h4>\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n        </div>\\n        <!-- Modal body -->\\n        <div class=\\\"modal-body\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n              <mat-select placeholder=\\\"Reject reasons\\\" [(ngModel)]=\\\"rejectReason\\\" name=\\\"rejectReason\\\">\\n                <mat-option *ngFor=\\\"let reason of rejectRasonList\\\" [value]=\\\"reason.rejectionCode\\\">\\n                  {{reason.rejectionCode}}-{{reason.rejectionDesc}}</mat-option>\\n              </mat-select>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <!-- Modal footer -->\\n        <div class=\\\"modal-footer\\\">\\n          <button type=\\\"button\\\" mat-raised-button color=\\\"primary\\\" class=\\\"table-btn\\\"\\n            (click)=\\\"rejectTruck(rejectReason)\\\">Submit</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n\\n  <!-- View Loadslips  for coorsponding shipment -->\\n  <div class=\\\"modal\\\" id=\\\"commentModal\\\">\\n    <div class=\\\"modal-dialog\\\">\\n      <div class=\\\"modal-content\\\">\\n        <!-- Modal Header -->\\n        <div class=\\\"modal-header\\\">\\n          <h4 class=\\\"modal-title\\\">{{commentHeader}}</h4>\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n        </div>\\n        <!-- Modal body -->\\n        <div class=\\\"modal-body\\\">\\n          <p>{{commentMsg}}</p>\\n        </div>\\n        <!-- Modal footer -->\\n      </div>\\n    </div>\\n  </div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2dhdGUtc2VjdXJpdHkvdHJ1Y2staW52ZW50b3J5LXNoaXBwaW5nL3RydWNrLWludmVudG9yeS1zaGlwcGluZy5jb21wb25lbnQuc2NzcyJ9 */\"","import { HelperServiceService } from './../../services/helper-service/helper-service.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { ApiserviceService } from '../../services/api/apiservice.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { constants } from 'src/app/constants';\nimport * as XLSX from 'xlsx'\nimport { Router } from '@angular/router';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';\nimport { AppDateAdapter, APP_DATE_FORMATS } from 'src/app/public/date.adapters';\nimport * as moment from 'moment'\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\ndeclare var $: any;\n@Component({\n  selector: 'app-truck-inventory-shipping',\n  templateUrl: './truck-inventory-shipping.component.html',\n  styleUrls: ['./truck-inventory-shipping.component.scss'],\n  providers: [\n    {\n      provide: DateAdapter, useClass: AppDateAdapter\n    },\n    {\n      provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS\n    }\n  ]\n})\nexport class TruckInventoryShippingComponent implements OnInit {\n  fgsReportedTrucksIndents = [];\n  gateSeuReportedTrucksIndents = [];\n  isLoading: boolean = false;\n  commentHeader: string;\n  editing = {};\n  editingFgs = {};\n  gateSecurityIndents = [];\n  editingRDCpln = {};\n  rejectReason: any;\n  fgPage = {\n    limit: 10,\n    count: 0,\n    offset: 0,\n    orderBy: 'myColumn1',\n    orderDir: 'desc',\n    pageSize: 200\n  }\n  selected = [];\n  userRoles: any;\n  plantBayList: any;\n  commentMsg: string;\n  loadSlipType: string;\n  isShow: boolean = true;\n  destinationList: any[];\n  transporterList: any[];\n  rejectRasonList: any[];\n  indentId: any;\n  transporter: any;\n  truckType = [];\n  destination: any;\n  destinationDesc: any;\n  descriptionList = [];\n  typeOfTruckReport = {};\n  statusType = [];\n  trckNumber: any;\n  source: any;\n  sourceList: any;\n  rdcTruckInventoryData: any[];\n  reportLocation: string;\n  truckList = [];\n  reportTruckStatusList: { \"key\": string; \"value\": string; }[];\n  gateInFromDate: string;\n  gateInToDate: string;\n  gateOutFromDate: string;\n  gateOutToDate: string;\n  reportFromDate: string;\n  reportToDate: string;\n  loadslipList = [];\n  rejectData: any;\n  baystatusList = [];\n  shipmentId: string;\n  bayStatus = [];\n  countryList: any[];\n  destCountryName: any;\n  isIntransitTruck: boolean = true;\n  categoryList = [];\n  materialGrp = [];\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n  // rejectionList = [\"NORMAL\", \"REJECTED\"];\n  rejection = [];\n  rejectionList: string[];\n  constructor(\n    public service: ApiserviceService,\n    private toastr: ToastrService,\n    private helperService: HelperServiceService,\n    private router: Router\n  ) {\n    this.userRoles = constants.roles;\n    this.typeOfTruckReport = constants.truckReportTypes;\n    this.reportTruckStatusList = constants.truckInventoryStatusList;\n    this.baystatusList = constants.bayStatusList;\n    this.reportLocation = localStorage.getItem('sourceID');\n\n\n\n\n  }\n\n\n\n  ngOnInit() {\n    localStorage.setItem(\"userMenu\", \"fgs-truck-status\");\n    this.rejectionList = constants.rejectionList;\n    // for getting truck type master\n    this.getTruckTypeMasterData();\n    this.getAllRejectReasons();\n    let data = {\n      'type': this.typeOfTruckReport['inventory'],\n      'activity': \"P\",\n      \"reportLocation\": this.reportLocation,\n      \"pageLength\": 200\n    }\n    this.selected = [];\n    this.truckInventoryShippingAPI(data);\n    this.service.get_service(ApiserviceService.apisList.getPlanByInfo).subscribe(response => {\n      console.log(response);\n      this.plantBayList = response['data'];\n    })\n\n    this.getCategoryMasterData();\n  }\n\n  // Checking if the logged in role is DP_REP or L1_MGR or L2_MGR\n  isDPREPRole() {\n    let currentRole = this.service.checkRole();\n    if (currentRole == this.userRoles.planner3 || currentRole == this.userRoles.L1MGR || currentRole == this.userRoles.L2MGR) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  onFooterPage(pageInfo) {\n    console.log(pageInfo);\n\n  }\n\n\n  truckInventoryShippingAPI(data) {\n    this.isLoading = true;\n    this.service.post_service(ApiserviceService.apisList.getTruckData, data).subscribe(response => {\n      console.log(response);\n      if (response['statusCode'] == 200) {\n        this.selected = [];\n        //set data for FGS operations \n        this.fgsReportedTrucksIndents = response['data'].truckReportsData;\n        this.fgsReportedTrucksIndents = [...this.fgsReportedTrucksIndents];\n        this.fgPage.limit = response['data'].pageLength;\n        this.fgPage.count = response['data'].total;\n        this.isLoading = false;\n      } else {\n        this.isLoading = false;\n        this.toastr.error(response['message'] ? response['message'] : \"Some thing Went Wrong\", \"!Error\")\n      }\n    }, (err) => {\n      console.log(\"Error\", err);\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n  }\n  // for getting truck type master\n  getTruckTypeMasterData() {\n    this.service.get_service(ApiserviceService.apisList.truckTypeMasterData).subscribe(response => {\n      if (response['statusCode'] == 200) {\n        this.truckList = response['data'];\n      } else {\n        this.toastr.error(response['message'] ? response['message'] : \"Some thing went wrong\", \"!Error\");\n      }\n    }, (err) => {\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n    });\n  }\n  //clear data\n  clearData() {\n    this.destination = '';\n    this.indentId = \"\";\n    this.statusType = [];\n    this.transporter = \"\";\n    this.trckNumber = \"\";\n    this.truckType = [];\n    this.destinationDesc = \"\";\n    this.descriptionList = [];\n    this.destinationList = [];\n    this.transporterList = [];\n    this.source = '';\n    this.gateInFromDate = '';\n    this.gateInToDate = '';\n    this.gateOutFromDate = '';\n    this.gateOutToDate = '';\n    this.reportFromDate = '';\n    this.reportToDate = '';\n    this.shipmentId = '';\n    this.bayStatus = [];\n    this.destCountryName = '';\n    this.countryList = [];\n    this.rejection = [];\n    this.materialGrp = [];\n  }\n\n\n  //refersh data \n  refreshData() {\n    this.table.offset = 0;\n    this.clearData();\n    this.selected = [];\n    this.source = '';\n    // Refresh Data FGS operations & FGs gatesecurity \n    let data = {\n      'type': this.typeOfTruckReport['inventory'],\n      'activity': \"P\",\n      \"reportLocation\": this.reportLocation\n    }\n    this.truckInventoryShippingAPI(data);\n\n  }\n\n\n  // truck status filter creteria\n  truckstatusIndetsFilter() {\n    if (this.helperService.getDateValidations(this.gateInFromDate, this.gateInToDate, this.gateOutFromDate, this.gateOutToDate, this.reportFromDate, this.reportToDate)) {\n      this.table.offset = 0;\n      let obj = this.countryList ? (this.countryList.find(a => a.description == this.destCountryName)) : {};\n      let data = {\n        'source': this.source,\n        'destination': this.destination,\n        'indentID': this.indentId,\n        'pageLength': this.fgPage.pageSize,\n        //  status needed as string to backend API\n        'status': (this.statusType).toString(),\n        'transporter': this.transporter,\n        'truckNumber': this.trckNumber,\n        'truckType': this.truckType,\n        'type': this.typeOfTruckReport['inventory'],\n        'activity': \"P\",\n        \"reportLocation\": this.reportLocation,\n        \"shipmentID\": this.shipmentId,\n        // Gate In Dates\n        \"fromGateInDate\": this.gateInFromDate ? (moment(this.gateInFromDate).format('DD/MM/YYYY')) : '',\n        \"toGateInDate\": this.gateInToDate ? (moment(this.gateInToDate).format('DD/MM/YYYY')) : '',\n        // Gate Out Dates\n        \"fromGateOutDate\": this.gateOutFromDate ? (moment(this.gateOutFromDate).format('DD/MM/YYYY')) : '',\n        \"toGateOutDate\": this.gateOutToDate ? (moment(this.gateOutToDate).format('DD/MM/YYYY')) : '',\n        // Report Dates\n        \"fromReportDate\": this.reportFromDate ? (moment(this.reportFromDate).format('DD/MM/YYYY')) : '',\n        \"toReportDate\": this.reportToDate ? (moment(this.reportToDate).format('DD/MM/YYYY')) : '',\n        \"bayStatus\": this.bayStatus,\n        \"destCountry\": obj ? (obj.value) : '',\n        \"rejection\": this.rejection,\n        \"indentCategoryList\":this.materialGrp\n      }\n      this.truckInventoryShippingAPI(data);\n    }\n  }\n\n\n  // datatables with server side pagination for FGS Role\n  FgsDatatablePageData(pageInfo: { count?: number, pageSize?: number, limit?: number, offset?: number }) {\n    let obj = this.countryList ? (this.countryList.find(a => a.description == this.destCountryName)) : {};\n    let datatabledata = {\n      'index': pageInfo.offset,\n      'pageLength': pageInfo.pageSize,\n      'destination': this.destination,\n      'indentID': this.indentId,\n      //  status needed as string to backend API\n      'status': (this.statusType).toString(),\n      'transporter': this.transporter,\n      'truckNumber': this.trckNumber,\n      'truckType': this.truckType,\n      'type': this.typeOfTruckReport['inventory'],\n      'source': this.source,\n      'activity': \"P\",\n      \"reportLocation\": this.reportLocation,\n      \"shipmentID\": this.shipmentId,\n      // Gate In Dates\n      \"fromGateInDate\": this.gateInFromDate ? (moment(this.gateInFromDate).format('DD/MM/YYYY')) : '',\n      \"toGateInDate\": this.gateInToDate ? (moment(this.gateInToDate).format('DD/MM/YYYY')) : '',\n      // Gate Out Dates\n      \"fromGateOutDate\": this.gateOutFromDate ? (moment(this.gateOutFromDate).format('DD/MM/YYYY')) : '',\n      \"toGateOutDate\": this.gateOutToDate ? (moment(this.gateOutToDate).format('DD/MM/YYYY')) : '',\n      // Report Dates\n      \"fromReportDate\": this.reportFromDate ? (moment(this.reportFromDate).format('DD/MM/YYYY')) : '',\n      \"toReportDate\": this.reportToDate ? (moment(this.reportToDate).format('DD/MM/YYYY')) : '',\n      \"bayStatus\": this.bayStatus,\n      \"destCountry\": obj ? (obj.value) : '',\n      \"rejection\": this.rejection,\n      \"indentCategoryList\":this.materialGrp\n    }\n    this.truckInventoryShippingAPI(datatabledata);\n\n  }\n\n  //get filter destination result\n  countryOfDestinationFilter(event, type) {\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?' + type + '=' + filtervalue).subscribe(response => {\n        if (response['statusCode'] == 200) {\n          this.countryList = [];\n          this.countryList = response['data'].searchResult;\n          this.isLoading = false;\n        } else {\n          this.isLoading = false;\n          this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n        }\n\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n\n  }\n  onSelect({ selected }) {\n    // console.log('Select Event', selected, this.selected);\n  }\n\n  updateValueFgs(event, cell, rowIndex, row) {\n    console.log('inline editing rowIndex', rowIndex)\n    // this.editingFgs[rowIndex + '-' + cell] = true;\n    this.fgsReportedTrucksIndents[rowIndex][cell] = event.value;\n    this.fgsReportedTrucksIndents = [...this.fgsReportedTrucksIndents];\n    console.log('UPDATED!', this.fgsReportedTrucksIndents);\n    this.bayAssign(row);\n  }\n  showFilter() {\n    this.isShow = !this.isShow;\n  }\n\n  // fgs call method \n  callGateSecurity(row) {\n\n    if (row.bayAssigned == undefined) {\n      row.bayAssigned = '';\n    }\n    this.isLoading = true;\n    let data = {\n      gateControlCode: row.gateControlCode,\n      status: \"CALL_TRUCK\",\n      indentId: row.indentId,\n      bayAssigned: row.bayAssigned,\n      destDis: row.destDis,\n      destCountryName: row.destCountryName\n    }\n    this.service.post_service(ApiserviceService.apisList.getIndentReportInfo, data).subscribe(response => {\n      console.log(response);\n      if (response['statusCode'] == 200) {\n\n        let index = this.fgsReportedTrucksIndents.indexOf(row);\n        let repsoneData = response['data'];\n        this.fgsReportedTrucksIndents[index] = repsoneData;\n        this.fgsReportedTrucksIndents = [... this.fgsReportedTrucksIndents];\n        this.editing = {};\n        this.selected = [];\n        this.selected = [...this.selected, repsoneData];\n        this.isLoading = false;\n        this.toastr.success(response['message'] ? response['message'] : \"Success\")\n      } else {\n        this.isLoading = false;\n        this.toastr.error(response['message'] ? response['message'] : \"Some thing Went Wrong\", \"!Error\")\n      }\n    }, (err) => {\n      console.log(\"Error\", err);\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n  }\n\n  // Bay Assign by gate security\n  bayAssign(row) {\n    if (row.bayAssigned == undefined) {\n      row.bayAssigned = '';\n    }\n    this.isLoading = true;\n    let data = {\n      gateControlCode: row.gateControlCode,\n      status: \"BAY_ASSIGNED\",\n      indentId: row.indentId,\n      bayAssigned: row.bayAssigned,\n      destDis: row.destDis,\n      destCountryName: row.destCountryName\n    }\n    this.service.post_service(ApiserviceService.apisList.getIndentReportInfo, data).subscribe(response => {\n      console.log(response);\n      if (response['statusCode'] == 200) {\n        let index = this.fgsReportedTrucksIndents.indexOf(row);\n        let repsoneData = response['data'];\n        this.fgsReportedTrucksIndents[index] = repsoneData;\n        this.fgsReportedTrucksIndents = [... this.fgsReportedTrucksIndents];\n        this.selected = [];\n        this.selected = [...this.selected, repsoneData];\n        this.editing = {};\n        this.isLoading = false;\n        this.toastr.success(response['message'] ? response['message'] : \"Success\")\n      } else {\n        this.isLoading = false;\n        this.toastr.error(response['message'] ? response['message'] : \"Some thing Went Wrong\", \"!Error\")\n      }\n    }, (err) => {\n      console.log(\"Error\", err);\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n\n  }\n\n  //get filter destination result\n  getfilterDestination(event, typeofevent, isIntransitTruck) {\n    this.destinationDesc = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.destinationList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?destination=' + filtervalue + '&isIntransitTruck=' + isIntransitTruck).subscribe(response => {\n        if (typeofevent === 'destination') {\n          this.destinationList = response['data'].searchResult;\n        } else {\n          this.sourceList = response['data'].searchResult;\n        }\n\n        console.log(\"this.destinationList\", this.destinationList)\n        this.isLoading = false;\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  // filter Transporter details\n  getfilterTransporter(event) {\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.transporterList = [];\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.searchFilter + '?transporter=' + filtervalue).subscribe(response => {\n        this.transporterList = response['data'].searchResult;\n        console.log(\"this.transporterList\", this.transporterList)\n        this.isLoading = false;\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n\n\n  //set value destination\n  setDestination(value) {\n    //  this.destinationDesc = value;\n    this.destination = value;\n  }\n\n  //set value to destination description\n  setDestDescription(value) {\n    this.destinationDesc = value;\n  }\n\n  updateValue(event, cell, index) {\n    if (event) {\n      this.fgsReportedTrucksIndents[index][cell] = (event.target) ? (event.target.value) : event;\n    } else {\n      this.fgsReportedTrucksIndents[index][cell] = '';\n    }\n  }\n\n  getUserDestinationList(event) {\n    this.destination = '';\n    let filtervalue = event.target.value;\n    if (filtervalue.length > 1 && !(event.keyCode == 40 || event.keyCode == 38 || event.keyCode == 13 || event.keyCode == 8)) {\n      this.isLoading = true;\n      this.service.get_service(ApiserviceService.apisList.getDestinationDescriptionDataList + event.target.value).subscribe(response => {\n        if (response['data']) {\n          this.descriptionList = response['data'].searchResult;\n        }\n        this.isLoading = false;\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n  // saveTruck(row){\n  //   this.isLoading = true;\n  //   let data = {\n  //     containerNum: row.containerNum,\n  //     driverContact: row.driverContact,\n  //     driverLicense: row.driverLicense,\n  //     driverName: row.driverName,\n  //     gateControlCode: row.gateControlCode,\n  //     indentId: row.indentId,\n  //     truckNumber: row.truckNumber,\n  //     truckType: row.truckType\n  //   }\n  //   this.service.post_service(ApiserviceService.apisList.updateTruckInventoryDetails, data).subscribe(response => {\n  //     if (response['statusCode'] == 200) {\n  //       //Update data for FGS ROLE\n  //       let replacebleIndex = this.fgsReportedTrucksIndents.findIndex(rawData => rawData.gateControlCode == data.gateControlCode);\n  //       this.editing = {};\n  //       this.editingFgs = {};\n  //       this.fgsReportedTrucksIndents[replacebleIndex] = response['data'];\n  //       this.fgsReportedTrucksIndents = [...this.fgsReportedTrucksIndents];\n  //       this.isLoading = false;\n  //       this.toastr.success(response['message']);\n  //     }\n  //     else {\n  //       this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n  //       this.isLoading = false;\n  //     }\n  //   }, (err) => {\n  //     console.log(\"Error\", err);\n  //     this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n  //     this.isLoading = false;\n  //   })\n\n  // }\n\n  addEvent(type, event) {\n    console.log(event.target.value);\n    if (event.target.value) {\n      switch (type) {\n        /* Checking if selected from date greater than to date.\n     Clearing the toDate field when from date greater than to date */\n        case \"gateInDate\":\n          if (this.gateInToDate && (this.gateInFromDate > this.gateInToDate)) {\n            this.gateInToDate = '';\n          }\n          // this.gateInToDate = '';\n          break;\n        case \"gateOutDate\":\n          if (this.gateOutToDate && (this.gateOutFromDate > this.gateOutToDate)) {\n            this.gateOutToDate = '';\n          }\n          // this.gateOutToDate = '';\n          break;\n        case \"repFromDate\":\n          if (this.reportToDate && (this.reportFromDate > this.reportToDate)) {\n            this.reportToDate = '';\n          }\n          // this.reportToDate = '';\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n\n\n  //export excel data\n  export(): void {\n    if (this.fgsReportedTrucksIndents.length > 0) {\n      this.isLoading = true;\n      let obj = this.countryList ? (this.countryList.find(a => a.description == this.destCountryName)) : {};\n      let data = {\n        'source': this.source,\n        'destination': this.destination,\n        'indentID': this.indentId,\n        //  status needed as string to backend API\n        'status': (this.statusType).toString(),\n        'transporter': this.transporter,\n        'truckNumber': this.trckNumber,\n        'truckType': this.truckType,\n        'type': this.typeOfTruckReport['inventory'],\n        'pageLength': this.fgPage.count,\n        'activity': \"P\",\n        \"reportLocation\": this.reportLocation,\n        \"shipmentID\": this.shipmentId,\n        // Gate In Dates\n        \"fromGateInDate\": this.gateInFromDate ? (moment(this.gateInFromDate).format('DD/MM/YYYY')) : '',\n        \"toGateInDate\": this.gateInToDate ? (moment(this.gateInToDate).format('DD/MM/YYYY')) : '',\n        // Gate Out Dates\n        \"fromGateOutDate\": this.gateOutFromDate ? (moment(this.gateOutFromDate).format('DD/MM/YYYY')) : '',\n        \"toGateOutDate\": this.gateOutToDate ? (moment(this.gateOutToDate).format('DD/MM/YYYY')) : '',\n        // Report Dates\n        \"fromReportDate\": this.reportFromDate ? (moment(this.reportFromDate).format('DD/MM/YYYY')) : '',\n        \"toReportDate\": this.reportToDate ? (moment(this.reportToDate).format('DD/MM/YYYY')) : '',\n        \"bayStatus\": this.bayStatus,\n        \"destCountry\": obj ? (obj.value) : '',\n        \"rejection\": this.rejection,\n        \"indentCategoryList\":this.materialGrp\n      }\n      this.service.post_service(ApiserviceService.apisList.getTruckData, data).subscribe(response => {\n        if (response['statusCode'] == 200) {\n          let newViewPlanData = response['data'].truckReportsData;\n          console.log(\"newViewPlanData\", newViewPlanData);\n          let excelRawData = newViewPlanData;\n          let newExcelData = [];\n          for (let i = 0; i < excelRawData.length; i++) {\n            let data = {\n              \"Indent Id\": excelRawData[i].indentId,\n              \"Truck Number\": excelRawData[i].truckNumber,\n              \"Transporter\": excelRawData[i].transporter,\n              \"Destination\": excelRawData[i].destination,\n              \"Destination Description\": excelRawData[i].destDis,\n              \"Truck Type\": excelRawData[i].truckType,\n              \"Report Date\": this.service.customDateTimeFormat(excelRawData[i].reportedDate),\n              \"Truck Status\": excelRawData[i].status,\n              \"Bay status\": excelRawData[i].bayStatus,\n              \"In weight (Kg)\": excelRawData[i].inWeight,\n              \"Gate In\": this.service.customDateTimeFormat(excelRawData[i].gateInDate),\n              \"Out weight (Kg)\": excelRawData[i].outWeight,\n              \"Net weight (Kg)\": excelRawData[i].netWeight,\n              \"SAP invoice weight (Kg)\": excelRawData[i].sapInvWeight,\n              \"Weight Diff (Kg)\": excelRawData.diffInvWeight,\n              \"Gate Out\": this.service.customDateTimeFormat(excelRawData[i].gateOutDate),\n              \"Loadslip Comments\": excelRawData[i].loadslipComments,\n              \"Gate Comments\": excelRawData[i].comments,\n              \"Rejection\": excelRawData[i].rejectionStatus,\n              \"Rejection Desc\": excelRawData[i].rejectionDesc,\n              \"Driver Name\": excelRawData[i].driverName,\n              \"Driver Number\": excelRawData[i].driverContact,\n              \"Driver Licence\": excelRawData[i].driverLicense,\n              \"Shipment Id\": excelRawData[i].shipmentId,\n              \"Container\": excelRawData[i].containerNum,\n              \"Bay Assigned\": excelRawData[i].bayAssigned,\n              \"SAP invoice value (INR)\": excelRawData[i].sapInvValue,\n              \"Eway bill No\": excelRawData[i].ewayBillNo,\n              \"Source\": excelRawData[i].source,\n              \"LR Num\":excelRawData[i].lrNum,\n              \"LR Date\":excelRawData[i].lrDate != null ? this.service.customDateFormat(excelRawData[i].lrDate) : null,\n              \"Indent Cat\":excelRawData[i].indentCategory,\n              \"SAP Invoice\":excelRawData[i].sapInvoice,\n              \"Tot Tyre\":excelRawData[i].totTyre,\n              \"Tot Tube\":excelRawData[i].totTube,\n              \"Tot Flap\":excelRawData[i].totFlap,\n              \"Tot Valve\":excelRawData[i].totValve,\n              \"Tot PCTR\": excelRawData[i].totPctr,\n              \"Other Qty\": excelRawData[i].otherQty,\n              \"Tot Qty\": excelRawData[i].totQty,\n              \"Country of Destination\": excelRawData[i].destCountryName,\n              \"Gate Serial No\": excelRawData[i].gateControlCode,\n              \"PUC\": (excelRawData[i].puc) ? 'Yes' : 'No',\n              \"Insurance\": (excelRawData[i].insurance) ? 'Yes' : 'No',\n              \"Seat Belt\": (excelRawData[i].seatBelt) ? 'Yes' : 'No',\n              \"First Aid\": (excelRawData[i].firstAid) ? 'Yes' : 'No',\n              \"Fire Extenguisher\": (excelRawData[i].fireExtenguisher) ? 'Yes' : 'No',\n              \"Emergency Card\": (excelRawData[i].emergencyCard) ? 'Yes' : 'No',\n              \"Spark Arrestor\": (excelRawData[i].sparKArrestor) ? 'Yes' : 'No',\n              \"Fitness Certificate\": (excelRawData[i].fitnessCert) ? 'Yes' : 'No',\n              \"Insert User\": excelRawData[i].insertUser,\n              \"Update User\": excelRawData[i].updateUser,\n            }\n            newExcelData.push(data)\n          }\n          const workBook = XLSX.utils.book_new(); // create a new blank book\n          const workSheet = XLSX.utils.json_to_sheet(newExcelData);\n          XLSX.utils.book_append_sheet(workBook, workSheet, 'data'); // add the worksheet to the book\n          XLSX.writeFile(workBook, 'truckInventoryShipping.xlsx');\n          this.isLoading = false;\n        } else {\n          this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n          this.isLoading = false;\n        }\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    } else {\n      this.toastr.error(\"No records found to export\", \"Error!\");\n    }\n\n  }\n\n  // for getting rejectReasons\n  getAllRejectReasons() {\n    this.service.get_service(ApiserviceService.apisList.rejectReasonData).subscribe(response => {\n      if (response['statusCode'] == 200) {\n        this.rejectRasonList = response['data'];\n      } else {\n        this.toastr.error(response['message'] ? response['message'] : \"Some thing went wrong\", \"!Error\");\n      }\n    }, (err) => {\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n    });\n  }\n\n  openTruckModel(row, rowIndex) {\n    this.rejectReason = '';\n    this.rejectData = {\n      gateControlCode: row.gateControlCode,\n      status: 'REJECT',\n      // rejectionCode:,\n      indentId: row.indentId,\n      truckNumber: row.truckNumber,\n      destDis: row.destDis,\n      destCountryName: row.destCountryName\n    }\n    $('#rejectionModel').modal('show');\n  }\n\n  // Reject Truck \n  rejectTruck(reason) {\n    let modifyIndex;\n    if (!reason) {\n      this.toastr.error('Please Give Reason for Rejecting Truck');\n      $('#rejectionModel').modal('show');\n    } else {\n      $('#rejectionModel').modal('hide');\n      this.isLoading = true;\n      this.rejectData['rejectionCode'] = reason;\n      this.service.post_service(ApiserviceService.apisList.getIndentReportInfo, this.rejectData).subscribe(response => {\n        if (response['statusCode'] == 200) {\n          // Update data for FGS ROLE\n          let replacebleIndex = this.fgsReportedTrucksIndents.findIndex(rawData => rawData.gateControlCode == this.rejectData['gateControlCode']);\n          let responseData = response['data'];\n          this.fgsReportedTrucksIndents[replacebleIndex] = responseData;\n          this.fgsReportedTrucksIndents = [...this.fgsReportedTrucksIndents];\n          this.selected = [];\n          this.selected = [...this.selected, responseData];\n          this.rejectReason = '';\n          this.isLoading = false;\n          this.toastr.success(response['message']);\n        }\n        else {\n          this.rejectReason = '';\n          $('#rejectionModel').modal('show');\n          this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n          this.isLoading = false;\n        }\n      }, (err) => {\n        console.log(\"Error\", err);\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      })\n    }\n  }\n\n\n  // view loadslips for cooresponding shipment Id\n  viewLoadslip(shipmentNumber, view) {\n    this.isLoading = true;\n    this.loadSlipType = view;\n    this.service.get_service(ApiserviceService.apisList.openLoadslipDetails + \"?shipmentId=\" + shipmentNumber).subscribe(response => {\n      if (response['statusCode'] == 200) {\n        if (response['data']) {\n          this.loadslipList = response['data'];\n          if (this.loadslipList.length == 1) {\n            this.viewLoadslipnavigation(this.loadslipList[0])\n          }\n          else if (this.loadslipList.length > 1) {\n            $(\"#loadslipsModal\").modal('show');\n          }\n        }\n        this.isLoading = false;\n      } else {\n        this.toastr.error(response['message'] ? response['message'] : \"Something went wrong..\", \"Error!\");\n        this.isLoading = false;\n      }\n    }, (err) => {\n      console.log(\"Error\", err);\n      this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      this.isLoading = false;\n    })\n  }\n\n\n  //show Comments in Modal\n  ShowComments(comments, type) {\n    if (type == 'loadslip') {\n      this.commentHeader = 'Loadslip Comments'\n    }\n    else {\n      this.commentHeader = 'Comments'\n    }\n    this.commentMsg = comments;\n    $('#commentModal').modal('show');\n  }\n\n  // Navigate to loadslip view\n  viewLoadslipnavigation(item) {\n    $(\"#loadslipsModal\").modal('hide');\n    let loadSlipId = item['loadlipId'];\n    let type = item.type;\n    if (this.loadSlipType == 'loadslipView') {\n      if (type == 'FGS_EXP') {\n        this.router.navigateByUrl('/load-slip-view-for-export/' + loadSlipId);\n      } else if (type == 'JIT_OEM') {\n        this.router.navigateByUrl('/load-slip-view-for-jit/' + loadSlipId);\n      } else {\n        this.router.navigateByUrl('/load-slip-view/' + loadSlipId);\n      }\n    }\n    else {\n      this.router.navigateByUrl('/load-slip-qty-view/' + loadSlipId);\n    }\n    // this.router.navigateByUrl('/load-slip-view/' + loadslipId)\n  }\n\n    //for getting category master data\n    getCategoryMasterData() {\n      this.service.get_service(ApiserviceService.apisList.categoryMasterData).subscribe(response => {\n        if (response['statusCode'] == 200) {\n          this.categoryList = response['data'];\n        } else {\n          this.toastr.error(response['message'] ? response['message'] : \"Some thing went wrong\", \"!Error\");\n        }\n      }, (err) => {\n        this.toastr.error(err ? err : \"Something went wrong..\", \"Error!\");\n      })\n    }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { customMaterialModule } from '../../angular-material';\nimport { LoaderModule } from '../../public/loader/loader-shared.module';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { CustomDatePipeModule } from 'src/app/date-pipe-shared.module';\nimport { TruckInventoryShippingComponent } from './truck-inventory-shipping.component';\n\nconst routes: Routes = [\n  { path: '', component: TruckInventoryShippingComponent},\n];\n\n@NgModule({\n  imports: [\n    [RouterModule.forChild(routes)],\n    CommonModule,\n    FormsModule,\n    customMaterialModule,\n    LoaderModule,\n    NgxDatatableModule,\n    CustomDatePipeModule\n  ],\n  declarations: [\n    TruckInventoryShippingComponent\n  ]\n})\n\nexport class truckInventoryShippingModule { }\n"],"sourceRoot":""}